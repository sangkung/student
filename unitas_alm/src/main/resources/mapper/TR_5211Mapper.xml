<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.almweb.mapper.TR_5211Mapper">

	<!-- 채번 -->
    <select id="getSnroNo" parameterType="java.util.Map" resultType="java.util.LinkedHashMap">
    SELECT NVL((SELECT SNRO_KIND_TC||LPAD(TO_CHAR(TO_NUMBER(SUBSTR( MAX(SNRO_NO), 2,3)) + 1), 3, '0')
                  FROM TSI_USER_SNRO_MNG
                 WHERE ORG_CLAS_C   = #{ORG_CLAS_C}
                   AND BR_C         = #{BR_C}
                   AND SNRO_KIND_C  = #{SNRO_KIND_C}
                   AND SNRO_KIND_TC = #{SNRO_KIND_TC}
              GROUP BY SNRO_KIND_TC ),   #{SNRO_KIND_TC}||'001') AS SNRO_NO
      FROM DUAL
	</select>


	<!-- Main 조회 -->
    <select id="selectTr5211Main" parameterType="java.util.Map" resultType="java.util.LinkedHashMap">
SELECT A.ORG_CLAS_C
     , A.BR_C
     , A.SNRO_KIND_C
     , A.SNRO_NO
     , A.SNRO_NO_ORG
     , A.SNRO_KIND_TC
     , A.SNRO_NM
     , A.SNRO_CNTN
     , A.CHK
     , A.GRID_STATUS
     , A.LAST_CHNG_ID
     , B.BR_NM
     , B.MO_BR_C
     , B.BLNG_HQ_BR_C
     , C.LAST_CHNG_ID_NM
  FROM (
        SELECT ORG_CLAS_C                          /*기관분류코드          */
             , BR_C                                /*점소코드              */
             , SNRO_KIND_C                         /*시나리오유형코드      */
             , CASE WHEN SNRO_NO LIKE 'U%' THEN  '사용자_'||SUBSTR(SNRO_NO, -3)
                    ELSE '표준_'||SUBSTR(SNRO_NO, -3)
               END              AS SNRO_NO         /*시나리오번호          */
             , SNRO_NO          AS SNRO_NO_ORG
             , SNRO_KIND_TC     AS SNRO_KIND_TC    /*시나리오유형구분코드  */
             , SNRO_NM          AS SNRO_NM         /*시나리오명            */
             , SNRO_CNTN        AS SNRO_CNTN       /*시나리오내용          */
             , '0'              AS CHK             /*그리드 삭제 상태값    */
             , '1'              AS GRID_STATUS     /*그리드 제어 상태값    */
             , LAST_CHNG_ID     AS LAST_CHNG_ID 
          FROM TSI_USER_SNRO_MNG
         WHERE ORG_CLAS_C   = #{ORG_CLAS_C}
           AND SNRO_KIND_C  = '07'   /* 특판시나리오 07 */
          <choose>
              <when test="MO_BR_C == 'ALL'">
                  AND (BR_C = '000' OR SNRO_KIND_TC = 'S') /*전체조합*/
              </when>
              <when test="MO_BR_C == '001'">
                  AND (BR_C = #{BR_C} OR SNRO_KIND_TC = 'S') /*도지회별 합산, 중앙회*/
              </when>
              <otherwise>
                  AND (BR_C IN (SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{MO_BR_C}) OR SNRO_KIND_TC = 'S') /*단위조합별 조회*/
              </otherwise>
          </choose>
       ) A
     , (
        SELECT '000'      AS MO_BR_C
             , '000'      AS BR_C
             , '전체조합' AS BR_NM
             , '000'      AS BLNG_HQ_BR_C
          FROM DUAL
         UNION ALL
        SELECT MO_BR_C
             , BR_C
             , BR_NM
             , BLNG_HQ_BR_C
          FROM TTL_BR_C_INFO
         GROUP BY MO_BR_C
                , BR_C
                , BR_NM
                , BLNG_HQ_BR_C
       ) B
     , (
        SELECT USID     AS LAST_CHNG_ID
             , USER_NM  AS LAST_CHNG_ID_NM
          FROM TSY_USER_MNG 
         WHERE USE_YN = 'Y'
       ) C
 WHERE A.BR_C         = B.BR_C(+)
   AND A.LAST_CHNG_ID = C.LAST_CHNG_ID(+)
 ORDER BY A.SNRO_NO_ORG
    </select>


	<!-- Tree 조회 -->
    <select id="selectTr5211Tree" parameterType="java.util.Map" resultType="java.util.LinkedHashMap">
SELECT LEVEL                                    AS LVL
     , NVL(ORG_CLAS_C, #{ORG_CLAS_C})           AS ORG_CLAS_C          /*기관분류코드               */
     , NVL(BR_C, #{BR_C})                       AS BR_C                /*점소코드                   */
     , AC_BUSI_TC                               AS AC_BUSI_TC          /*회계사업구분코드           */
     , '07'                                     AS SNRO_KIND_C         /*시나리오유형코드 특판(07)  */
     , NVL(SNRO_NO, #{SNRO_NO})                 AS SNRO_NO             /*시나리오번호               */
     , DECODE(ACCT_C, '0000000', '', ACCT_C)    AS ACCT_C              /*계정코드                   */
     , TRIM(ACCT_C_NM)                          AS ACCT_C_NM           /*계정코드명                 */
     , NVL(FIX_VAR_TC, 'XX')                    AS FIX_VAR_TC          /*고정변동구분코드    */
     , NVL(RATE_VAR_CYCL, 00000)                AS RATE_VAR_CYCL       /*금리변동주기        */
     , NVL(PRIN_RMBR_METH_C, 'XX')              AS PRIN_RMBR_METH_C    /*원금상환방법코드    */
     , NVL(ALM_BASE_RATE_C, 'XXXXXXX')          AS ALM_BASE_RATE_C     /*ALM기준금리코드     */
     <!-- 
     , FIX_VAR_TC                               AS FIX_VAR_TC          /*고정변동구분코드           */
     , RATE_VAR_CYCL                            AS RATE_VAR_CYCL       /*금리변동주기               */
     , PRIN_RMBR_METH_C                         AS PRIN_RMBR_METH_C    /*원금상환방법코드           */
     , ALM_BASE_RATE_C                          AS ALM_BASE_RATE_C     /*ALM기준금리코드            */
     -->
     , SSAL_APLY_STRT_DATE                      AS SSAL_APLY_STRT_DATE /*특판적용시작일자           */
     , SSAL_OBJ_AMT                             AS SSAL_OBJ_AMT        /*특판목표금액               */
     , SSAL_APLY_MMS                            AS SSAL_APLY_MMS       /*특판적용월수               */
     , MRGN_RATE                                AS MRGN_RATE           /*마진이율                   */
     , '0'                                      AS CHK                 /*가정설정 확인              */
     , '0'                                      AS DIMENSION_CHK       /*디멘전속성값 확인          */
     , '1'                                      AS GRID_STATUS         /*그리드Row상태확인용        */
     , LWST_YN                                  AS LWST_YN             /*최하위여부                 */
  FROM (
         SELECT A.BASE_DATE
              , A.ORG_CLAS_C
              , A.AC_BUSI_TC
              , A.ACCT_C
              , A.ACCT_C_NM
              , A.UP_ACCT_C
              , A.LWST_YN             /*최하위여부           */
              , A.PRNT_ORD
              , B.FIX_VAR_TC          /*고정변동구분코드     */
              , B.RATE_VAR_CYCL       /*금리변동주기         */
              , B.PRIN_RMBR_METH_C    /*원금상환방법코드     */
              , B.ALM_BASE_RATE_C     /*ALM기준금리코드      */
              , B.BR_C
              , B.SNRO_NO
              , B.ACCT_C               AS CHK
              , B.FIX_VAR_TC           AS FIX_VAL_TC_CHK
              , B.RATE_VAR_CYCL        AS RATE_VAR_CYCL_CHK
              , B.PRIN_RMBR_METH_C     AS PRIN_RMBR_METH_C_CHK
              , B.ALM_BASE_RATE_C      AS ALM_BASE_RATE_C_CHK
              , B.SSAL_APLY_STRT_DATE  /* 특판적용시작일자 */
              , B.SSAL_OBJ_AMT         /* 특판목표금액     */
              , B.SSAL_APLY_MMS        /* 특판적용월수     */
              , B.MRGN_RATE            /* 마진이율         */
           FROM (
                 SELECT T.BASE_DATE
                      , T.ORG_CLAS_C
                      , T.AC_BUSI_TC
                      , T.ACCT_C
                      , T.ACCT_C_NM
                      , T.UP_ACCT_C
                      , T.PRNT_ORD
                      , T.LWST_YN             /*최하위여부           */
                   FROM TSY_ACCT_MSTR_MNG  T  /*시스템_계정마스터관리*/
                  WHERE T.BASE_DATE  = (SELECT MAX(BASE_DATE) FROM TSY_ACCT_MSTR_MNG WHERE BASE_DATE &lt;= TO_CHAR(LAST_DAY(TO_DATE(#{BASE_DATE}, 'YYYYMMDD')), 'YYYYMMDD'))
                    AND T.USE_YN     = 'Y'
                    AND T.ORG_CLAS_C = #{ORG_CLAS_C}
                    <if test="ORG_CLAS_C == '10'">
                  UNION ALL
                 SELECT X.BASE_DATE       AS BASE_DATE
                      , X.ORG_CLAS_C      AS ORG_CLAS_C
                      , X.AC_BUSI_TC      AS AC_BUSI_TC
                      , X.UP_ACCT_C       AS ACCT_C
                      , Y.AC_BUSI_TC_NM   AS ACCT_C_NM
                      , '999999999'       AS UP_ACCT_C
                      , 0                 AS PRNT_ORD
                      , 'N'               AS LWST_YN       /*최하위여부*/
                   FROM TSY_ACCT_MSTR_MNG   X
                      , (
                          SELECT DTL_CLAS_VAL  AS AC_BUSI_TC
                               , DTL_CLAS_NM   AS AC_BUSI_TC_NM
                            FROM TSY_CO_MNG
                           WHERE USE_YN  = 'Y'
                             AND CO_C    = 'AC_BUSI_TC'
                        ) Y
                  WHERE X.ORG_CLAS_C   = #{ORG_CLAS_C}
                    AND X.BASE_DATE    = (SELECT MAX(BASE_DATE) FROM TSY_ACCT_MSTR_MNG WHERE BASE_DATE &lt;= TO_CHAR(LAST_DAY(TO_DATE(#{BASE_DATE}, 'YYYYMMDD')), 'YYYYMMDD'))
                    AND X.UP_ACCT_C    = '0000000'
                    AND X.AC_BUSI_TC   = Y.AC_BUSI_TC
                  GROUP BY X.BASE_DATE
                         , X.ORG_CLAS_C
                         , X.AC_BUSI_TC
                         , X.UP_ACCT_C
                         , Y.AC_BUSI_TC_NM
					</if>
                )  A
              , TSI_SSAL_SNRO_PEST_MNG  B    /* 시뮬레이션_특판시나리오예측관리 */
          WHERE A.ORG_CLAS_C       = B.ORG_CLAS_C(+)
            AND A.ACCT_C           = B.ACCT_C(+)
            AND A.AC_BUSI_TC       = B.AC_BUSI_TC(+)
            <if test="ORG_CLAS_C == '30'">
            AND A.AC_BUSI_TC       = '2102'
            </if>
            AND B.ORG_CLAS_C(+)    = #{ORG_CLAS_C}
            AND B.BR_C(+)          = DECODE( #{BR_C}, 'ALL', '000', #{BR_C} )
            AND B.SNRO_NO(+)       = #{SNRO_NO}
         ) C
         <if test="ORG_CLAS_C == '10'">
   START WITH UP_ACCT_C  = '999999999'
   		</if>
 		<if test="ORG_CLAS_C == '30'">
   START WITH UP_ACCT_C  = '0000000'
   		</if>
 CONNECT BY PRIOR ACCT_C = UP_ACCT_C AND PRIOR BASE_DATE = BASE_DATE AND PRIOR ORG_CLAS_C = ORG_CLAS_C <if test="ORG_CLAS_C == '10'">AND PRIOR AC_BUSI_TC = AC_BUSI_TC</if>
   ORDER BY AC_BUSI_TC
          , PRNT_ORD
          , FIX_VAR_TC
          , RATE_VAR_CYCL
          , PRIN_RMBR_METH_C
          , ALM_BASE_RATE_C
    </select>

	<!-- Main 저장 -->
    <insert id="insertTr5211" parameterType="java.util.Map">
        INSERT INTO TSI_USER_SNRO_MNG
        (
            ORG_CLAS_C
          , BR_C
          , SNRO_KIND_C
          , SNRO_NO
          , SNRO_KIND_TC
          , SNRO_NM
          , SNRO_CNTN
          , APLY_AMT_TC
          , LAST_CHNG_ID
          , LAST_CHNG_DT
        ) VALUES (
            #{ORG_CLAS_C}
          , #{BR_C}
          , #{SNRO_KIND_C}
          , #{SNRO_NO}
          , #{SNRO_KIND_TC}
          , #{SNRO_NM}
          , #{SNRO_CNTN}
          , NULL
          , #{LAST_CHNG_ID}
          , SYSDATE
        )
    </insert>

	<!-- Main 수정 -->
    <update id="updateTr5211" parameterType="java.util.Map">
        UPDATE TSI_USER_SNRO_MNG
           SET SNRO_NM      = #{SNRO_NM}
             , SNRO_CNTN    = #{SNRO_CNTN}
             , LAST_CHNG_ID = #{LAST_CHNG_ID}
             , LAST_CHNG_DT = SYSDATE
         WHERE ORG_CLAS_C   = #{ORG_CLAS_C}
           AND BR_C         = #{BR_C}
           AND SNRO_KIND_C  = #{SNRO_KIND_C}
           AND SNRO_NO      = #{SNRO_NO}
           AND SNRO_KIND_TC = #{SNRO_KIND_TC}
    </update>

	<!-- Main 삭제 -->
    <delete id="deleteTr5211" parameterType="java.util.Map">
        DELETE FROM TSI_USER_SNRO_MNG
         WHERE ORG_CLAS_C   = #{ORG_CLAS_C}
           AND BR_C         = #{BR_C}
           AND SNRO_KIND_C  = #{SNRO_KIND_C}
           AND SNRO_NO      = #{SNRO_NO}
           AND SNRO_KIND_TC = #{SNRO_KIND_TC}
    </delete>

	<!-- Main 삭제 할때 시뮬레이션에 있는 정보도 삭제 -->
    <update id="updateTr5211TsiUserSimuMng" parameterType="java.util.Map">
        UPDATE TSI_USER_SIMU_MNG
           SET SSAL_SNRO_NO  = ''    /* 특판 */
             , LAST_CHNG_ID  = #{LAST_CHNG_ID}
             , LAST_CHNG_DT  = SYSDATE
         WHERE ORG_CLAS_C    = #{ORG_CLAS_C}
           AND BR_C          = #{BR_C}
           AND SSAL_SNRO_NO  = #{SNRO_NO}
    </update>

	<!-- Main삭제 할때  예측에 있는 정보도 삭제 -->
    <delete id="deleteTr5211TsiSsalSnroPestMng" parameterType="java.util.Map">
      DELETE FROM TSI_SSAL_SNRO_PEST_MNG
       WHERE ORG_CLAS_C = #{ORG_CLAS_C}
         AND BR_C       = #{BR_C}
         AND SNRO_NO    = #{SNRO_NO}
    </delete>


	<!-- Main 신규등록 할 때 Tree정보도 default로 저장 -->
    <insert id="insertTr5211Tree" parameterType="java.util.Map">
         INSERT INTO TSI_SSAL_SNRO_PEST_MNG
         SELECT T.ORG_CLAS_C        AS ORG_CLAS_C          /*기관분류코드               */
              , #{BR_C}             AS BR_C                /*점소코드                   */
              , T.AC_BUSI_TC        AS AC_BUSI_TC          /*회계사업구분코드           */
              , #{SNRO_NO}          AS SNRO_NO             /*시나리오번호               */
              , T.ACCT_C            AS ACCT_C              /*계정코드                   */
              , S.FIX_VAR_TC        AS FIX_VAR_TC          /*고정변동구분코드           */
              , S.RATE_VAR_CYCL     AS RATE_VAR_CYCL       /*금리변동주기               */
              , S.PRIN_RMBR_METH_C  AS PRIN_RMBR_METH_C    /*원금상환방법코드           */
              , S.ALM_BASE_RATE_C   AS ALM_BASE_RATE_C     /*ALM기준금리코드            */
              , NULL                AS SSAL_APLY_STRT_DATE /*특판적용시작일자           */ 
              , NULL                AS SSAL_OBJ_AMT        /*특판목표금액               */
              , NULL                AS SSAL_APLY_MMS       /*특판적용월수               */
              , NULL                AS MRGN_RATE           /*마진이율                   */
              , #{LAST_CHNG_ID}     AS LAST_CHNG_ID
              , SYSDATE             AS LAST_CHNG_DT
           FROM TSY_ACCT_MSTR_MNG  T  /*시스템_계정마스터관리*/
              , (
                 SELECT ORG_CLAS_C
                 		<if test="BR_C != '000'">
                      , BR_C
                      	</if>
                      , AC_BUSI_TC
                      , ACCT_C
                      , FIX_VAR_TC              AS FIX_VAR_TC         /*고정변동구분코드 */
                      , NVL(RATE_VAR_CYCL, 0)   AS RATE_VAR_CYCL      /*금리변동주기     */
                      , PRIN_RMBR_METH_C        AS PRIN_RMBR_METH_C   /*원금상환방법코드 */
                      , ALM_BASE_RATE_C         AS ALM_BASE_RATE_C    /*ALM기준금리코드  */
                   FROM TIG_INTG_LDGR_M    /*통합_고객원장_월*/
                  WHERE BASE_DATE  = (SELECT MAX(BASE_DATE) FROM TIG_INTG_LDGR_M WHERE BASE_DATE &lt;= TO_CHAR(LAST_DAY(TO_DATE(#{BASE_DATE}, 'YYYYMMDD')), 'YYYYMMDD'))
                    AND ORG_CLAS_C = #{ORG_CLAS_C}
                    AND LDGR_ACC_STAT_C = '1'    /*연결계좌상태코드-정상(1)*/
                    <if test="BR_C != '000'">
                    AND BR_C = #{BR_C}
                    </if>
					<if test="ORG_CLAS_C == '30'">
                    AND AC_BUSI_TC = '2102'
                    </if>                    
                  GROUP BY BASE_DATE
                         , ORG_CLAS_C
                         <if test="BR_C != '000'">
                         , BR_C
                         </if>
                         , AC_BUSI_TC
                         , ACCT_C
                         , FIX_VAR_TC
                         , RATE_VAR_CYCL
                         , PRIN_RMBR_METH_C
                         , ALM_BASE_RATE_C
                )  S
          WHERE T.BASE_DATE  = (SELECT MAX(BASE_DATE) FROM TSY_ACCT_MSTR_MNG WHERE BASE_DATE &lt;= TO_CHAR(LAST_DAY(TO_DATE(#{BASE_DATE}, 'YYYYMMDD')), 'YYYYMMDD'))
            AND T.USE_YN     = 'Y'
            AND T.LWST_YN    = 'Y'  /* 최하위여부 */
            AND T.ORG_CLAS_C = #{ORG_CLAS_C}
            AND T.ORG_CLAS_C = S.ORG_CLAS_C
            AND T.AC_BUSI_TC = S.AC_BUSI_TC
            AND T.ACCT_C     = S.ACCT_C
    </insert>

	<!-- 시뮬레이션_사용자시나리오예측설정 복사 저장 -->
    <insert id="insertTr5211SsalSnroPestMngCopy" parameterType="java.util.Map">
INSERT INTO TSI_SSAL_SNRO_PEST_MNG
SELECT ORG_CLAS_C            AS ORG_CLAS_C
     , BR_C                  AS BR_C
     , AC_BUSI_TC            AS AC_BUSI_TC 
     , #{SNRO_NO}            AS SNRO_NO
     , ACCT_C                AS ACCT_C
     , FIX_VAR_TC            AS FIX_VAR_TC
     , RATE_VAR_CYCL         AS RATE_VAR_CYCL
     , PRIN_RMBR_METH_C      AS PRIN_RMBR_METH_C
     , ALM_BASE_RATE_C       AS ALM_BASE_RATE_C
     , SSAL_APLY_STRT_DATE   AS SSAL_APLY_STRT_DATE
     , SSAL_OBJ_AMT          AS SSAL_OBJ_AMT
     , SSAL_APLY_MMS         AS SSAL_APLY_MMS
     , MRGN_RATE             AS MRGN_RATE
     , #{LAST_CHNG_ID}       AS LAST_CHNG_ID
     , SYSDATE               AS LAST_CHNG_DT
  FROM TSI_SSAL_SNRO_PEST_MNG
 WHERE ORG_CLAS_C = #{ORG_CLAS_C}
   AND BR_C       = #{BR_C}
   AND SNRO_NO    = #{SNRO_NO_ORG}
    </insert>

	<!-- 시뮬레이션_특판시나리오예측관리 수정 -->
    <insert id="insertTr5211PestMngMerge" parameterType="java.util.List">
    MERGE INTO TSI_SSAL_SNRO_PEST_MNG A
    USING (
          <foreach collection="list" item="item" open="" close="" index="index" separator="UNION">
           SELECT #{item.ORG_CLAS_C}                 AS ORG_CLAS_C
                , #{item.BR_C}                       AS BR_C
                , #{item.AC_BUSI_TC}                 AS AC_BUSI_TC
                , #{item.SNRO_NO}                    AS SNRO_NO
                , #{item.ACCT_C}                     AS ACCT_C
                , #{item.FIX_VAR_TC}                 AS FIX_VAR_TC
                , TO_NUMBER(#{item.RATE_VAR_CYCL})   AS RATE_VAR_CYCL
                , #{item.PRIN_RMBR_METH_C}           AS PRIN_RMBR_METH_C
                , #{item.ALM_BASE_RATE_C}            AS ALM_BASE_RATE_C
                , #{item.SSAL_APLY_STRT_DATE}        AS SSAL_APLY_STRT_DATE
                , TO_NUMBER(#{item.SSAL_OBJ_AMT})    AS SSAL_OBJ_AMT
                , TO_NUMBER(#{item.SSAL_APLY_MMS})   AS SSAL_APLY_MMS
                , TO_NUMBER(#{item.MRGN_RATE})       AS MRGN_RATE
                , #{item.LAST_CHNG_ID}               AS LAST_CHNG_ID
                , SYSDATE                            AS LAST_CHNG_DT
             FROM DUAL
          </foreach>
          ) B
    ON (
             A.ORG_CLAS_C       = B.ORG_CLAS_C
         AND A.BR_C             = B.BR_C
         AND A.AC_BUSI_TC       = B.AC_BUSI_TC
         AND A.SNRO_NO          = B.SNRO_NO
         AND A.ACCT_C           = B.ACCT_C
         AND A.FIX_VAR_TC       = B.FIX_VAR_TC
         AND A.RATE_VAR_CYCL    = B.RATE_VAR_CYCL
         AND A.PRIN_RMBR_METH_C = B.PRIN_RMBR_METH_C
         AND A.ALM_BASE_RATE_C  = B.ALM_BASE_RATE_C
       )
  WHEN MATCHED THEN
       UPDATE SET A.SSAL_APLY_STRT_DATE = B.SSAL_APLY_STRT_DATE
		        , A.SSAL_OBJ_AMT        = B.SSAL_OBJ_AMT
		        , A.SSAL_APLY_MMS       = B.SSAL_APLY_MMS
		        , A.MRGN_RATE           = B.MRGN_RATE
		        , A.LAST_CHNG_ID        = B.LAST_CHNG_ID
		        , A.LAST_CHNG_DT        = B.LAST_CHNG_DT
 WHEN NOT MATCHED THEN
   INSERT (
            A.ORG_CLAS_C
          , A.BR_C			  
          , A.AC_BUSI_TC			  
          , A.SNRO_NO			  
          , A.ACCT_C			  
          , A.FIX_VAR_TC			  
          , A.RATE_VAR_CYCL			  
          , A.PRIN_RMBR_METH_C			  
          , A.ALM_BASE_RATE_C			  
          , A.SSAL_APLY_STRT_DATE			  
          , A.SSAL_OBJ_AMT			  
          , A.SSAL_APLY_MMS			  
          , A.MRGN_RATE			  
          , A.LAST_CHNG_ID			  
          , A.LAST_CHNG_DT			  
   ) VALUES (
            B.ORG_CLAS_C
          , B.BR_C            
          , B.AC_BUSI_TC            
          , B.SNRO_NO            
          , B.ACCT_C            
          , B.FIX_VAR_TC            
          , B.RATE_VAR_CYCL            
          , B.PRIN_RMBR_METH_C            
          , B.ALM_BASE_RATE_C            
          , B.SSAL_APLY_STRT_DATE            
          , B.SSAL_OBJ_AMT            
          , B.SSAL_APLY_MMS            
          , B.MRGN_RATE            
          , B.LAST_CHNG_ID            
          , B.LAST_CHNG_DT            
     )
    </insert>
<!--     <insert id="insertTr5211PestMngMerge" parameterType="java.util.Map"> -->
<!--     MERGE INTO TSI_USER_SNRO_PEST_MNG A -->
<!--     USING ( -->
<!--            SELECT #{ORG_CLAS_C}                 AS ORG_CLAS_C -->
<!--                 , #{BR_C}                       AS BR_C -->
<!--                 , #{AC_BUSI_TC}                 AS AC_BUSI_TC -->
<!--                 , #{SNRO_NO}                    AS SNRO_NO -->
<!--                 , #{ACCT_C}                     AS ACCT_C -->
<!--                 , #{FIX_VAR_TC}                 AS FIX_VAR_TC -->
<!--                 , TO_NUMBER(#{RATE_VAR_CYCL})   AS RATE_VAR_CYCL -->
<!--                 , #{PRIN_RMBR_METH_C}           AS PRIN_RMBR_METH_C -->
<!--                 , #{ALM_BASE_RATE_C}            AS ALM_BASE_RATE_C -->
<!--                 , #{SSAL_APLY_STRT_DATE}        AS SSAL_APLY_STRT_DATE -->
<!--                 , TO_NUMBER(#{SSAL_OBJ_AMT})    AS SSAL_OBJ_AMT -->
<!--                 , TO_NUMBER(#{SSAL_APLY_MMS})   AS SSAL_APLY_MMS -->
<!--                 , TO_NUMBER(#{MRGN_RATE})       AS MRGN_RATE -->
<!--                 , #{LAST_CHNG_ID}               AS LAST_CHNG_ID -->
<!--                 , SYSDATE                       AS LAST_CHNG_DT -->
<!--              FROM DUAL -->
<!--           ) B -->
<!--     ON ( -->
<!--              A.ORG_CLAS_C       = B.ORG_CLAS_C -->
<!--          AND A.BR_C             = B.BR_C -->
<!--          AND A.AC_BUSI_TC       = B.AC_BUSI_TC -->
<!--          AND A.SNRO_NO          = B.SNRO_NO -->
<!--          AND A.ACCT_C           = B.ACCT_C -->
<!--          AND A.FIX_VAR_TC       = B.FIX_VAR_TC -->
<!--          AND A.RATE_VAR_CYCL    = B.RATE_VAR_CYCL -->
<!--          AND A.PRIN_RMBR_METH_C = B.PRIN_RMBR_METH_C -->
<!--          AND A.ALM_BASE_RATE_C  = B.ALM_BASE_RATE_C -->
<!--        ) -->
<!--   WHEN MATCHED THEN -->
<!--        UPDATE SET A.SSAL_APLY_STRT_DATE = B.SSAL_APLY_STRT_DATE -->
<!-- 		        , A.SSAL_OBJ_AMT        = B.SSAL_OBJ_AMT -->
<!-- 		        , A.SSAL_APLY_MMS       = B.SSAL_APLY_MMS -->
<!-- 		        , A.MRGN_RATE           = B.MRGN_RATE -->
<!-- 		        , A.LAST_CHNG_ID        = B.LAST_CHNG_ID -->
<!-- 		        , A.LAST_CHNG_DT        = B.LAST_CHNG_DT -->
<!--  WHEN NOT MATCHED THEN -->
<!--    INSERT ( -->
<!--             A.ORG_CLAS_C -->
<!--           , A.BR_C			   -->
<!--           , A.AC_BUSI_TC			   -->
<!--           , A.SNRO_NO			   -->
<!--           , A.ACCT_C			   -->
<!--           , A.FIX_VAR_TC			   -->
<!--           , A.RATE_VAR_CYCL			   -->
<!--           , A.PRIN_RMBR_METH_C			   -->
<!--           , A.ALM_BASE_RATE_C			   -->
<!--           , A.SSAL_APLY_STRT_DATE			   -->
<!--           , A.SSAL_OBJ_AMT			   -->
<!--           , A.SSAL_APLY_MMS			   -->
<!--           , A.MRGN_RATE			   -->
<!--           , A.LAST_CHNG_ID			   -->
<!--           , A.LAST_CHNG_DT			   -->
<!--    ) VALUES ( -->
<!--           , B.ORG_CLAS_C -->
<!--           , B.BR_C             -->
<!--           , B.AC_BUSI_TC             -->
<!--           , B.SNRO_NO             -->
<!--           , B.ACCT_C             -->
<!--           , B.FIX_VAR_TC             -->
<!--           , B.RATE_VAR_CYCL             -->
<!--           , B.PRIN_RMBR_METH_C             -->
<!--           , B.ALM_BASE_RATE_C             -->
<!--           , B.SSAL_APLY_STRT_DATE             -->
<!--           , B.SSAL_OBJ_AMT             -->
<!--           , B.SSAL_APLY_MMS             -->
<!--           , B.MRGN_RATE             -->
<!--           , B.LAST_CHNG_ID             -->
<!--           , B.LAST_CHNG_DT             -->
<!--      ) -->
<!--     </insert> -->


	<update id="deleteTr5211SsalSnroPestMng" parameterType="java.util.List"> 
		BEGIN
		<foreach collection="list" item="item" open="" close="" separator="">
		UPDATE TSI_SSAL_SNRO_PEST_MNG 
		   SET SSAL_APLY_STRT_DATE = ''
		     , SSAL_OBJ_AMT        = ''
		     , SSAL_APLY_MMS       = ''
		     , MRGN_RATE           = ''
		     , LAST_CHNG_ID        = #{item.LAST_CHNG_ID}
		     , LAST_CHNG_DT        = SYSDATE
		 WHERE ORG_CLAS_C       = #{item.ORG_CLAS_C} 
		   AND BR_C             = #{item.BR_C} 
		   AND AC_BUSI_TC       = #{item.AC_BUSI_TC} 
		   AND SNRO_NO          = #{item.SNRO_NO} 
		   AND ACCT_C           = #{item.ACCT_C} 
		   AND FIX_VAR_TC       = #{item.FIX_VAR_TC} 
		   AND RATE_VAR_CYCL    = #{item.RATE_VAR_CYCL}
		   AND PRIN_RMBR_METH_C = #{item.PRIN_RMBR_METH_C} 
		   AND ALM_BASE_RATE_C  = #{item.ALM_BASE_RATE_C} ; 
		</foreach> 
		 END;
	</update>
    
    <select id="selectTr5211AlmBaseRate" parameterType="java.util.Map" resultType="java.util.LinkedHashMap">
        SELECT ALM_BASE_RATE_C    AS CD
             , ALM_BASE_RATE_NM   AS NM
          FROM TSY_ALM_BASE_RATE_MNG 
         WHERE USE_YN = 'Y'
         GROUP BY ALM_BASE_RATE_C
                , ALM_BASE_RATE_NM
    </select>


</mapper>