<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.almweb.mapper.TR_1101Mapper">


<!-- 각 탭별로 max 레벨값 조회 -->
	<select id = "getReportMaxLv" parameterType="java.util.Map" resultType="String">
	
		SELECT MAX(STAT_RPRT_LVL) FROM ALMADM.TII_STAT_ANAL_RPRT_INFO WHERE STAT_RPRT_ID = #{RPRT_TC} || #{TAB_TC} || '0'
			
	</select>


  
	<select id = "selectTR_1101" parameterType="java.util.Map" resultType="java.util.HashMap">
	
		WITH GD AS(
		    SELECT 
		         BASE_DATE
		       , ALM_WORK_TC
		       , ORG_CLAS_C
		       , BR_C
		       , CUR_C
		       , AC_BUSI_TC
		       , STAT_RPRT_ID
		       , STAT_RPRT_ITEM_ID
		       , NEW_ACC_YN
		       , BKPR_AMT            AS BKPR_AMT
		       , RPRT_ACC_CNT        AS RPRT_ACC_CNT
		       , BKPR_APLY_RATE_AMT  AS BKPR_APLY_RATE_AMT
		       , RPRT_HG_RATE        AS RPRT_HG_RATE
		       , RPRT_MIN_RATE       AS RPRT_MIN_RATE      
		    FROM TSR_GD_RATE_STAT 
		   WHERE 
		            STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		        AND CUR_C        = 'KRW'         -- 통화코드 고정 
		        AND ALM_WORK_TC  = 'M' 			 -- ALM작업구분 고정 
		        AND BASE_DATE    = #{BASE_DATE}
		        AND ORG_CLAS_C   = #{ORG_CLAS_C} 
		        
			 -- ( 회계구분  )
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
		     -- 전체조합 가져오기 
		)
		,GD_ORIGIN AS(
		    SELECT 
		        BASE_DATE
		        ,ALM_WORK_TC
		        ,ORG_CLAS_C
		        ,BR_C
		        ,CUR_C
		        ,AC_BUSI_TC
		        ,STAT_RPRT_ID
		        ,STAT_RPRT_ITEM_ID
		        ,NEW_ACC_YN
		        ,BKPR_AMT            AS BKPR_AMT
		        ,RPRT_ACC_CNT        AS RPRT_ACC_CNT
		        ,BKPR_APLY_RATE_AMT  AS BKPR_APLY_RATE_AMT
		        ,RPRT_HG_RATE        AS RPRT_HG_RATE
		        ,RPRT_MIN_RATE       AS RPRT_MIN_RATE       
		    FROM TSR_GD_RATE_STAT 
		   WHERE 
		            CUR_C        = 'KRW'
		        AND ALM_WORK_TC  = 'M' 
		        AND STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		        AND BASE_DATE    = #{BASE_DATE}
		        AND ORG_CLAS_C   = #{ORG_CLAS_C}
		        
			 -- ( 회계구분  )
			 -- 중앙회를 제외한 나머지는 신용회계(2102) 로 고정!
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
		 	
			 -- ( 점소코드  )
			 --************************************************
			 -- 전체조합 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == 'ALL'">
			 	-- 모든 점소코드 나오기
			 </if>
			 
			 -- 단위조합별 조회 시 (지소포함여부  yes/no)
			 <if test="JISO_INCLUDE == 'yes' and BLNG_HQ_BR_C != ''">   
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{BR_C} ) 
			 </if>
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C != ''"> 
			 	AND BR_C     = #{BR_C}
			 </if>
			 
			 -- 도지회별 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C != 'ALL' and BR_C != '001'">
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BR_C} )
			 </if>
			 
			 -- 중앙회 조회 시  
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == '001'">
				AND BR_C     = #{BR_C}
			 </if>
			 --************************************************
		)      
		,GET_SAME_ZONE_BR_C AS(

		    SELECT BR_C 
		      FROM TTL_BR_C_INFO
		     WHERE 1 = 1 
		       AND ZONE_TC IN(
		                       SELECT DTL_CLAS_VAL 
		                         FROM TSY_CO_MNG 
		                        WHERE CO_C = 'ZONE_TC'
		                          AND CO_C_1_VAL = ( 
		                                             SELECT CO_C_1_VAL 
		                                               FROM TSY_CO_MNG
		                                              WHERE CO_C = 'ZONE_TC'
		                                                AND DTL_CLAS_VAL = #{ZONE_TC} 
		                                           ) 
		                     ) 
		 
		)    
		SELECT 
		     Y1.LVL1                                                                                          	   AS ACCT_NM1  	     
		    <if test="LVL == 1"></if> 
		    <if test="LVL == 2">
		    	, DECODE( GROUPING_ID( Y1.LVL2 ), 1, TRIM(Y1.LVL1) || ' 소계', TRIM(Y1.LVL2) )  					   AS ACCT_NM2		   
		   	    , GROUPING_ID( Y1.LVL2 )															 	 		   AS GRP_ID
		    </if>  
		    <if test="LVL == 3">
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3 ), 3 , TRIM(Y1.LVL1) || ' 소계', TRIM(Y1.LVL2) )  			   AS ACCT_NM2	
		   		, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3 ), 1 , TRIM(Y1.LVL2) || ' 소계', TRIM(Y1.LVL3) )  			   AS ACCT_NM3 	   
		   	    , GROUPING_ID( Y1.LVL2,Y1.LVL3 )													 			   AS GRP_ID
		    </if>  
		    <if test="LVL == 4">
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 7 , TRIM(Y1.LVL1) || ' 소계', TRIM(Y1.LVL2) )  	   AS ACCT_NM2	
		   		, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 3 , TRIM(Y1.LVL2) || ' 소계', TRIM(Y1.LVL3) )  	   AS ACCT_NM3 	
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 1 , TRIM(Y1.LVL3) || ' 소계', TRIM(Y1.LVL4) )      AS ACCT_NM4    
		   	    , GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 )											   			   AS GRP_ID
		    </if> 
		    <if test="LVL == 5">
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4,Y1.LVL5 ), 15, Y1.LVL1 || ' 소계', Y1.LVL2 )		   AS ACCT_NM2 
		   		, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4,Y1.LVL5 ), 7 , Y1.LVL2 || ' 소계', Y1.LVL3 )		   AS ACCT_NM3 
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4,Y1.LVL5 ), 3 , Y1.LVL3 || ' 소계', Y1.LVL4 )		   AS ACCT_NM4 
		    	, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4,Y1.LVL5 ), 1 , Y1.LVL4 || ' 소계', Y1.LVL5 )		   AS ACCT_NM5 
		    	, GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4,Y1.LVL5 )                                         		   AS GRP_ID  
		    </if> 						 			       
		    ----------------------------------------------
		    , SUM(Y1.VIEW_BKPR_AMT             		    )                                                         	AS BKPR_AMT
		    , SUM(Y1.BKPR_AMT             		        )                                                         	AS SCREEN_CAL_AMT
		    , SUM(Y1.BKPR_APLY_RATE_AMT             	)                                                         	AS SCREEN_CAL_RATE_AMT
		    , SUM(Y1.RPRT_ACC_CNT                 		)                                                           AS RPRT_ACC_CNT
		    , NVL(ROUND(SUM(Y1.BKPR_APLY_RATE_AMT) / DECODE(SUM(Y1.BKPR_AMT),0,NULL,SUM(Y1.BKPR_AMT)),2) ,0)        AS RPRT_AVG_RATE
		    , ROUND(MAX(Y1.RPRT_HG_RATE  )            ,2)                                                         	AS RPRT_HG_RATE      
		    , ROUND(MIN(Y1.RPRT_MIN_RATE )            ,2)                                                         	AS RPRT_MIN_RATE
		    ----------------------------------------------
		    , SUM(Y1.VIEW_BKPR_AMT_NEW             		)                                                         	     AS BKPR_AMT_NEW 
		    , SUM(Y1.BKPR_AMT_NEW             		    )                                                         		 AS SCREEN_CAL_AMT_NEW
		    , SUM(Y1.BKPR_APLY_RATE_AMT_NEW             )                                                         		 AS SCREEN_CAL_RATE_AMT_NEW
		    , SUM(Y1.RPRT_ACC_CNT_NEW             		)                                                         	     AS RPRT_ACC_CNT_NEW
		    , NVL(ROUND(SUM(Y1.BKPR_APLY_RATE_AMT_NEW) / DECODE(SUM(Y1.BKPR_AMT_NEW),0,NULL,SUM(Y1.BKPR_AMT_NEW)),2) ,0) AS RPRT_AVG_RATE_NEW     
		    , ROUND(MAX(Y1.RPRT_HG_RATE_NEW  )        ,2)                                                         	     AS RPRT_HG_RATE_NEW
		    , ROUND(MIN(Y1.RPRT_MIN_RATE_NEW )        ,2)                                                         	     AS RPRT_MIN_RATE_NEW  
            ----------------------------------------------도지회
            , ROUND(NVL( SUM(Y2.BKPR_APLY_RATE_AMT_1) 
               / DECODE( SUM(Y2.BKPR_AMT_1),0,NULL, SUM(Y2.BKPR_AMT_1)  ) , 0  ), 2 )                               AS DOZI_AVG_RATE             

            , ROUND(NVL( SUM(Y2.BKPR_APLY_RATE_AMT_NEW_1) 
               / DECODE( SUM(Y2.BKPR_AMT_NEW_1) ,0,NULL, SUM(Y2.BKPR_AMT_NEW_1)  ) , 0  ), 2 )                      AS DOZI_AVG_RATE_NEW_ACCT                                                                                                                                    
            ----------------------------------------------동일권역
            , ROUND(NVL( SUM(Y2.BKPR_APLY_RATE_AMT_2) 
               / DECODE( SUM(Y2.BKPR_AMT_2) ,0,NULL, SUM(Y2.BKPR_AMT_2)  ) , 0  ) , 2 )                             AS EQUAL_ZONE_AVG_RATE        

            , ROUND(NVL( SUM(Y2.BKPR_APLY_RATE_AMT_NEW_2) 
               / DECODE( SUM(Y2.BKPR_AMT_NEW_2) ,0,NULL, SUM(Y2.BKPR_AMT_NEW_2)  ) , 0  ) , 2 )                     AS EQUAL_ZONE_AVG_RATE_NEW_ACCT                                                                                     
            ----------------------------------------------전국
            , ROUND(NVL( SUM( Y2.BKPR_APLY_RATE_AMT_3 ) / DECODE( SUM(Y2.BKPR_AMT_3) ,0,NULL, SUM(Y2.BKPR_AMT_3) ), 0 ), 2 )  AS  ALL_AVG_RATE

            , ROUND(NVL( SUM(Y2.BKPR_APLY_RATE_AMT_NEW_3) 
             / DECODE( SUM(Y2.BKPR_AMT_NEW_3) ,0,NULL, SUM(Y2.BKPR_AMT_NEW_3) ), 0 ), 2 )                           AS  ALL_AVG_RATE_NEW_ACCT
            ---------------------------------------------- 
            /* 화면 계산용 데이터 */
            ,SUM(Y2.BKPR_AMT_NEW_1)                                                                                 AS SCREEN_CAL_AMT_NEW_1      -- 도지회_잔액(신규)
            ,SUM(Y2.BKPR_APLY_RATE_AMT_NEW_1)                                                                       AS SCREEN_CAL_RATE_AMT_NEW_1 -- 도지회_평균금리금액(신규)
            ,SUM(Y2.BKPR_AMT_NEW_2)                                                                                 AS SCREEN_CAL_AMT_NEW_2      -- 동일권역_잔액(신규)
            ,SUM(Y2.BKPR_APLY_RATE_AMT_NEW_2)                                                                       AS SCREEN_CAL_RATE_AMT_NEW_2 -- 동일권역_평균금리금액(신규)
            ,SUM(Y2.BKPR_AMT_NEW_3)                                                                                 AS SCREEN_CAL_AMT_NEW_3      -- 전국_잔액(신규)
            ,SUM(Y2.BKPR_APLY_RATE_AMT_NEW_3)                                                                       AS SCREEN_CAL_RATE_AMT_NEW_3 -- 전국_평균금리금액(신규)
            ----------------------------------------------------------------------------------------
            ,SUM(Y2.BKPR_AMT_1)                                                                                     AS SCREEN_CAL_AMT_1          -- 도지회_잔액
            ,SUM(Y2.BKPR_APLY_RATE_AMT_1)                                                                           AS SCREEN_CAL_RATE_AMT_1     -- 도지회_평균금리금액
            ,SUM(Y2.BKPR_AMT_2)                                                                                     AS SCREEN_CAL_AMT_2          -- 동일권역_잔액
            ,SUM(Y2.BKPR_APLY_RATE_AMT_2)                                                                           AS SCREEN_CAL_RATE_AMT_2     -- 동일권역_평균금리금액
            ,SUM(Y2.BKPR_AMT_3)                                                                                     AS SCREEN_CAL_AMT_3          -- 전국_잔액
            ,SUM(Y2.BKPR_APLY_RATE_AMT_3)                                                                           AS SCREEN_CAL_RATE_AMT_3     -- 전국_평균금리금액
		FROM 
		(   
		    SELECT 
		        LVL1
		    <if test="LVL == 2">
		    	, LVL2
		    </if>
		    <if test="LVL == 3">
		        , LVL2
		        , LVL3
		    </if>
		    <if test="LVL == 4">
		        , LVL2
		        , LVL3
		        , LVL4
		    </if>
		    <if test="LVL == 5">
		        , LVL2
		        , LVL3
		        , LVL4
		        , LVL5  
		    </if>        
		        /* 데이터처리 */                                             
		        -------------------------------------------기준월 전체 계좌              
			    , NVL(ROUND(SUM(BKPR_AMT) / TO_NUMBER(#{AMT_UNIT}) ),0)                                                 		 					  AS VIEW_BKPR_AMT
		        , NVL(SUM( BKPR_AMT )        ,0)                                                                                                      AS BKPR_AMT               -- 잔액(평균금리 계산용 잔액)
		        , NVL(SUM( RPRT_ACC_CNT )    ,0)                                                                                                      AS RPRT_ACC_CNT       	-- 건수
		        , NVL(SUM(BKPR_APLY_RATE_AMT),0)                                                                                                      AS BKPR_APLY_RATE_AMT     -- 이율금액
		        , NVL(MAX( RPRT_HG_RATE )    ,0)                                                                                                      AS RPRT_HG_RATE           -- 최고금리
		        , NVL(MIN( RPRT_MIN_RATE )   ,0)                                                                                                      AS RPRT_MIN_RATE          -- 최저금리
		        ------------------------------------------기준월 신규 계좌     
			    , NVL(ROUND(SUM(CASE WHEN NEW_ACC_YN = 'Y' THEN DECODE(BKPR_AMT,NULL,0,BKPR_AMT) END) / TO_NUMBER(#{AMT_UNIT}) ),0)	                  AS VIEW_BKPR_AMT_NEW                
		        , NVL(SUM( CASE WHEN NEW_ACC_YN = 'Y'  THEN BKPR_AMT 		   END ),0)                                    							  AS BKPR_AMT_NEW           -- 잔액(신규계정) 
		        , NVL(SUM( CASE WHEN NEW_ACC_YN = 'Y'  THEN RPRT_ACC_CNT 	   END ),0)                                    						   	  AS RPRT_ACC_CNT_NEW       -- 건수(신규계정)
		        , NVL(SUM( CASE WHEN NEW_ACC_YN = 'Y'  THEN BKPR_APLY_RATE_AMT END ),0)                                   							  AS BKPR_APLY_RATE_AMT_NEW -- 이율금액(신규계정)
		        , NVL(MAX( CASE WHEN NEW_ACC_YN = 'Y'  THEN RPRT_HG_RATE 	   END ),0)                                							      AS RPRT_HG_RATE_NEW       -- 최고금리(신규계정)
		        , NVL(MIN( CASE WHEN NEW_ACC_YN = 'Y'  THEN RPRT_MIN_RATE 	   END ),0)                                  							  AS RPRT_MIN_RATE_NEW      -- 최저금리(신규계정) 
		        -------------------------------------------- 
		        , MAX(PRNT_ORD1)                                                                                                                      AS PRNT_ORD1 
		        , MAX(PRNT_ORD2)                                                                                                                      AS PRNT_ORD2 
		        , MAX(PRNT_ORD3)                                                                                                                      AS PRNT_ORD3 
		        , MAX(PRNT_ORD4)                                                                                                                      AS PRNT_ORD4 
		        , MAX(PRNT_ORD5)                                                                                                                      AS PRNT_ORD5
		    FROM 
		    (
		     SELECT   
		             B.LVL1
		           , B.LVL2
		           , B.LVL3
		           , B.LVL4
		           , B.LVL5        
		           -----------------------
		           , A.STAT_RPRT_ID
		           , A.STAT_RPRT_ITEM_ID
		           , A.BR_C
		           , A.NEW_ACC_YN
		           , A.BKPR_AMT
		           , A.RPRT_ACC_CNT
		           , A.BKPR_APLY_RATE_AMT
		           , A.RPRT_HG_RATE
		           , A.RPRT_MIN_RATE
		           -----------------------
		           , B.PRNT_ORD1    
		           , B.PRNT_ORD2    
		           , B.PRNT_ORD3    
		           , B.PRNT_ORD4    
		           , B.PRNT_ORD5     
		        FROM GD_ORIGIN A
		        ,
		        (
		            SELECT LEVEL AS LVL
		                , SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%') AS STAT_RPRT_ITEM_NM_PATH
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 1 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL1
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 2 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL2
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 3 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL3
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 4 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL4
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 5 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL5
		                , STAT_RPRT_ITEM_NM
		                , ORG_CLAS_C
		                , STAT_RPRT_ID
		                , STAT_RPRT_ITEM_ID
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 1 ),TRIM(PRNT_ORD)))        AS PRNT_ORD1
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 2 ),TRIM(PRNT_ORD)))        AS PRNT_ORD2
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 3 ),TRIM(PRNT_ORD)))        AS PRNT_ORD3
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 4 ),TRIM(PRNT_ORD)))        AS PRNT_ORD4
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 5 ),TRIM(PRNT_ORD)))        AS PRNT_ORD5
		            FROM (
		                    SELECT ORG_CLAS_C
		                        , STAT_RPRT_ID
		                        , STAT_RPRT_ITEM_ID
                                    <if test="TAB_TC == 3">	 
                                    , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
		                                WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL +1) 
		                         	    WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
		                          	    WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
                                        WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                      END 																									 AS UP_STAT_RPRT_ITEM_ID
                                    </if>
                                    <if test="TAB_TC != 3">
                                    , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
                                        WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1) 
                                        WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1)
                                        WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                      END 																									 AS UP_STAT_RPRT_ITEM_ID
                                    </if> 
		                        , STAT_RPRT_ITEM_NM
		                        , STAT_RPRT_LVL
		                        , TOT_ITEM_YN
		                        , PRNT_ORD
		                    FROM  TII_STAT_ANAL_RPRT_INFO
		                   WHERE  ORG_CLAS_C   = #{ORG_CLAS_C}
		                     AND  STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		                ) A
		            START WITH UP_STAT_RPRT_ITEM_ID    = '-'
		            CONNECT BY PRIOR STAT_RPRT_ITEM_ID = UP_STAT_RPRT_ITEM_ID 
		                   AND PRIOR ORG_CLAS_C        = ORG_CLAS_C
		                   AND PRIOR STAT_RPRT_ID      = STAT_RPRT_ID
		        ) B
		        WHERE A.ORG_CLAS_C         = B.ORG_CLAS_C
		          AND A.STAT_RPRT_ID       = B.STAT_RPRT_ID
		          AND A.STAT_RPRT_ITEM_ID  = B.STAT_RPRT_ITEM_ID
		    )       
		    GROUP BY 
		         LVL1
		    <if test="LVL == 2">
		    	, LVL2
		    </if>
		    <if test="LVL == 3">
		        , LVL2
		        , LVL3
		    </if>
		    <if test="LVL == 4">
		        , LVL2
		        , LVL3
		        , LVL4
		    </if>
		    <if test="LVL == 5">
		        , LVL2
		        , LVL3
		        , LVL4
		        , LVL5  
		    </if>  
		)Y1    
		,
		(
		        SELECT 
		            LVL1
			    <if test="LVL == 2">
			    	, LVL2
			    </if>
			    <if test="LVL == 3">
			        , LVL2
			        , LVL3
			    </if>
			    <if test="LVL == 4">
			        , LVL2
			        , LVL3
			        , LVL4
			    </if>
			    <if test="LVL == 5">
			        , LVL2
			        , LVL3
			        , LVL4
			        , LVL5  
			    </if>  
		            /* 데이터 처리 
                        - 평균금리 = SUM( BKPR_APLY_RATE_AMT ) / SUM(BKPR_AMT) 
                        - 1 도지회
                        - 2 동일권역
                        - 3 전국
		            */
		            ----------------------------------------------
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BLNG_HQ_BR_C} ) THEN BKPR_AMT ELSE 0 END )                             AS BKPR_AMT_1
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BLNG_HQ_BR_C} ) THEN RATE_AMT ELSE 0 END )                             AS BKPR_APLY_RATE_AMT_1
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BLNG_HQ_BR_C} ) AND NEW_ACC_YN = 'Y' THEN BKPR_AMT ELSE 0 END )        AS BKPR_AMT_NEW_1
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BLNG_HQ_BR_C} ) AND NEW_ACC_YN = 'Y' THEN RATE_AMT ELSE 0 END )        AS BKPR_APLY_RATE_AMT_NEW_1
		            ----------------------------------------------
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM GET_SAME_ZONE_BR_C ) THEN BKPR_AMT ELSE 0 END )                                     						 AS BKPR_AMT_2
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM GET_SAME_ZONE_BR_C ) THEN RATE_AMT ELSE 0 END )                                  	 						 AS BKPR_APLY_RATE_AMT_2
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM GET_SAME_ZONE_BR_C ) AND NEW_ACC_YN = 'Y' THEN BKPR_AMT ELSE 0 END )             	  						 AS BKPR_AMT_NEW_2
		            , SUM( CASE WHEN BR_C IN ( SELECT BR_C FROM GET_SAME_ZONE_BR_C ) AND NEW_ACC_YN = 'Y' THEN RATE_AMT ELSE 0 END )            	  						 AS BKPR_APLY_RATE_AMT_NEW_2
		            ----------------------------------------------
		            , NVL(SUM(BKPR_AMT),0)                                                                                                                        			 AS BKPR_AMT_3
		            , NVL(SUM(RATE_AMT),0)                                                                                                                        			 AS BKPR_APLY_RATE_AMT_3
		            , SUM( CASE WHEN NEW_ACC_YN = 'Y' THEN BKPR_AMT ELSE 0 END )        						   			 												 AS BKPR_AMT_NEW_3
		            , SUM( CASE WHEN NEW_ACC_YN = 'Y' THEN RATE_AMT ELSE 0 END )        						   			 												 AS BKPR_APLY_RATE_AMT_NEW_3
		            ----------------------------------------------
		        FROM 
		        (
		            SELECT   
		                  B.LVL1
		                , B.LVL2
		                , B.LVL3
		                , B.LVL4
		                , B.LVL5
		                ------------------------
		                , A.STAT_RPRT_ID
		                , A.STAT_RPRT_ITEM_ID
		                , A.BR_C
		                , A.NEW_ACC_YN
		                , A.BKPR_AMT
		                , A.RPRT_ACC_CNT
		                , A.BKPR_APLY_RATE_AMT   		AS RATE_AMT
		                , A.RPRT_HG_RATE
		                , A.RPRT_MIN_RATE
		                ------------------------
		                , B.PRNT_ORD1    
		                , B.PRNT_ORD2    
		                , B.PRNT_ORD3    
		                , B.PRNT_ORD4    
		                , B.PRNT_ORD5     
		            FROM GD A
		            ,
		            (
		            SELECT LEVEL AS LVL
		                , SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%') AS STAT_RPRT_ITEM_NM_PATH
		                , REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 1 )                              AS LVL1
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 2 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL2
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 3 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL3
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 4 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL4
		                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 5 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL5
		                , STAT_RPRT_ITEM_NM
		                , ORG_CLAS_C
		                , STAT_RPRT_ID
		                , STAT_RPRT_ITEM_ID
		                , TO_NUMBER(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 1 ) )                           AS PRNT_ORD1
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 2 ),TRIM(PRNT_ORD)))        AS PRNT_ORD2
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 3 ),TRIM(PRNT_ORD)))        AS PRNT_ORD3
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 4 ),TRIM(PRNT_ORD)))        AS PRNT_ORD4
		                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 5 ),TRIM(PRNT_ORD)))        AS PRNT_ORD5
		            FROM (
		                    SELECT 
		                          ORG_CLAS_C
		                        , STAT_RPRT_ID
		                        , STAT_RPRT_ITEM_ID
                                    <if test="TAB_TC == 3">	 
                                    , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
		                                WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL +1) 
		                         	    WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
		                          	    WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
                                        WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                      END 																									 AS UP_STAT_RPRT_ITEM_ID
                                    </if>
                                    <if test="TAB_TC != 3">
                                    , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
                                        WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1) 
                                        WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1)
                                        WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                        WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                                      END 																									 AS UP_STAT_RPRT_ITEM_ID
                                    </if> 
		                        , STAT_RPRT_ITEM_NM
		                        , STAT_RPRT_LVL
		                        , TOT_ITEM_YN
		                        , PRNT_ORD
		                    FROM TII_STAT_ANAL_RPRT_INFO
		                   WHERE ORG_CLAS_C = #{ORG_CLAS_C}         
		                     AND STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		                ) A
		            START WITH UP_STAT_RPRT_ITEM_ID     = '-'
		            CONNECT BY  PRIOR STAT_RPRT_ITEM_ID = UP_STAT_RPRT_ITEM_ID 
		                    AND PRIOR ORG_CLAS_C        = ORG_CLAS_C
		                    AND PRIOR STAT_RPRT_ID      = STAT_RPRT_ID
		        ) B
		        WHERE A.ORG_CLAS_C         = B.ORG_CLAS_C
		          AND A.STAT_RPRT_ID       = B.STAT_RPRT_ID
		          AND A.STAT_RPRT_ITEM_ID  = B.STAT_RPRT_ITEM_ID
		    )       
		    GROUP BY 
		        LVL1
		    <if test="LVL == 2">
		    	, LVL2
		    </if>
		    <if test="LVL == 3">
		        , LVL2
		        , LVL3
		    </if>
		    <if test="LVL == 4">
		        , LVL2
		        , LVL3
		        , LVL4
		    </if>
		    <if test="LVL == 5">
		        , LVL2
		        , LVL3
		        , LVL4
		        , LVL5  
		    </if>  
		)Y2
		WHERE
		  1=1 
		  AND Y1.LVL1 = Y2.LVL1
	    <if test="LVL == 2">
		  AND Y1.LVL2 = Y2.LVL2
	    </if>
	    <if test="LVL == 3">
		  AND Y1.LVL2 = Y2.LVL2
		  AND Y1.LVL3 = Y2.LVL3
	    </if>
	    <if test="LVL == 4">
		  AND Y1.LVL2 = Y2.LVL2
		  AND Y1.LVL3 = Y2.LVL3
		  AND Y1.LVL4 = Y2.LVL4
	    </if>
	    <if test="LVL == 5">
		  AND Y1.LVL2 = Y2.LVL2
		  AND Y1.LVL3 = Y2.LVL3
		  AND Y1.LVL4 = Y2.LVL4
		  AND Y1.LVL5 = Y2.LVL5
	    </if>  
		GROUP BY
			Y1.LVL1
	   <if test="LVL == 1">
		ORDER BY
	      	MAX(PRNT_ORD1)
	   </if>
	   <if test="LVL == 2">
	   		, ROLLUP( Y1.LVL2 )	
		ORDER BY
		      MAX(PRNT_ORD1)    
		    , MAX(PRNT_ORD2) 
		    , GRP_ID     	
	   </if>
	   <if test="LVL == 3">
	   		, ROLLUP( Y1.LVL2, Y1.LVL3 )
		ORDER BY
		      MAX(PRNT_ORD1)    
		    , MAX(PRNT_ORD2)    
		    , MAX(PRNT_ORD3) 
		    , GRP_ID    	
	   </if>
	   <if test="LVL == 4">
	   		, ROLLUP( Y1.LVL2, Y1.LVL3, Y1.LVL4 )
		ORDER BY
		      MAX(PRNT_ORD1)    
		    , MAX(PRNT_ORD2)    
		    , MAX(PRNT_ORD3)    
		    , MAX(PRNT_ORD4)  	
		    , GRP_ID    
	   </if>
	   <if test="LVL == 5">
	   		, ROLLUP( Y1.LVL2, Y1.LVL3, Y1.LVL4, Y1.LVL5 )
		ORDER BY
		      MAX(PRNT_ORD1)    
		    , MAX(PRNT_ORD2)    
		    , MAX(PRNT_ORD3)    
		    , MAX(PRNT_ORD4)    
		    , MAX(PRNT_ORD5)
		    , GRP_ID     
	   </if>

	
	</select>






	<select id = "select_12MonthRate" parameterType="java.util.Map" resultType="java.util.HashMap">


		WITH TEMP1 AS(
		
			SELECT 
		          BASE_DATE
		        , ALM_WORK_TC
		        , ORG_CLAS_C
		        , BR_C
		        , CUR_C
		        , AC_BUSI_TC
		        , STAT_RPRT_ID
		        , STAT_RPRT_ITEM_ID
		        , NEW_ACC_YN
		        , BKPR_AMT                                      AS BKPR_AMT_1
		        , RPRT_ACC_CNT                           		AS RPRT_ACC_CNT_1
		        , BKPR_APLY_RATE_AMT              		        AS BKPR_APLY_RATE_AMT_1
		        , RPRT_HG_RATE                            		AS RPRT_HG_RATE_1
		        , RPRT_MIN_RATE                          		AS RPRT_MIN_RATE_1 
			FROM TSR_GD_RATE_STAT 
		   WHERE 1 = 1
		     AND BASE_DATE    = #{BASE_DATE} 
		     AND ALM_WORK_TC  = 'M' 
		     AND STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		     AND CUR_C        = 'KRW'
		     AND ORG_CLAS_C   = #{ORG_CLAS_C}			 
		        
		     
		     -- ( 회계구분  )
			 -- 중앙회를 제외한 나머지는 신용회계(2102) 로 고정!
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
		 	
			 -- ( 점소코드  )
			 --************************************************
			 -- 전체조합 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == 'ALL'">
			 	-- 모든 점소코드 나오기
			 </if>
			 
			 -- 단위조합별 조회 시 (지소포함여부  yes/no)
			 <if test="JISO_INCLUDE == 'yes' and BLNG_HQ_BR_C != ''">   
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{BR_C} ) 
			 </if>
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C != ''"> 
			 	AND BR_C     = #{BR_C}
			 </if>
			 
			 -- 도지회별 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C != 'ALL' and BR_C != '001'">
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BR_C} )
			 </if>
			 
			 -- 중앙회 조회 시  
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == '001'">
				AND BR_C     = #{BR_C}
			 </if>
			 --************************************************
		)


		,TEMP2 AS(
		
		    SELECT 
		         #{BASE_DATE}                                                                              			    AS BASE_DATE
		        , ALM_WORK_TC
		        , ORG_CLAS_C
		        , BR_C
		        , CUR_C
		        , AC_BUSI_TC
		        , STAT_RPRT_ID
		        , STAT_RPRT_ITEM_ID
		        , NEW_ACC_YN
		        -------------------------------------------------                                    
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS BKPR_AMT_2
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS RPRT_ACC_CNT_2
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_2
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS RPRT_HG_RATE_2
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS RPRT_MIN_RATE_2
		        ---------------------------------------                                             
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_3
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_3
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_3
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_3
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_3
		        ---------------------------------------                                              
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_4
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_4
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_4
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_4
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_4
		        ---------------------------------------                                             
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_5
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_5
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_5
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_5
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_5
		        ---------------------------------------                                             
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_6
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_6
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_6
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_6
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_6
		        ---------------------------------------                                              
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_7
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_7
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_7
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_7
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_7
		        ---------------------------------------                                              
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_8
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_8
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_8
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_8
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_8
		        ---------------------------------------                                              
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_9
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_9
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_9
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_9
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_9
		        ---------------------------------------                                              
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9),'YYYYMMDD') THEN BKPR_AMT ELSE NULL             END AS           BKPR_AMT_10
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL         END AS       RPRT_ACC_CNT_10
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL   END AS BKPR_APLY_RATE_AMT_10
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL         END AS       RPRT_HG_RATE_10
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL        END AS      RPRT_MIN_RATE_10
		        ---------------------------------------                                                                                             
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD') THEN BKPR_AMT ELSE NULL            END AS           BKPR_AMT_11
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL        END AS       RPRT_ACC_CNT_11
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL  END AS BKPR_APLY_RATE_AMT_11
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL        END AS       RPRT_HG_RATE_11
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL       END AS      RPRT_MIN_RATE_11
		        ---------------------------------------                                                                                             
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD') THEN BKPR_AMT ELSE NULL            END AS           BKPR_AMT_12
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD') THEN RPRT_ACC_CNT ELSE NULL        END AS       RPRT_ACC_CNT_12
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD') THEN BKPR_APLY_RATE_AMT ELSE NULL  END AS BKPR_APLY_RATE_AMT_12
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD') THEN RPRT_HG_RATE ELSE NULL        END AS       RPRT_HG_RATE_12
		        , CASE WHEN BASE_DATE     = TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD') THEN RPRT_MIN_RATE ELSE NULL       END AS      RPRT_MIN_RATE_12
		    FROM TSR_GD_RATE_STAT 
		   WHERE 
		        BASE_DATE        IN( 
		                              TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-1 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-2 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-3 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-4 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-5 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-6 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-7 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-8 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-9 ),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-10),'YYYYMMDD')
		                             ,TO_CHAR(ADD_MONTHS(TO_DATE(#{BASE_DATE},'YYYYMMDD'),-11),'YYYYMMDD')
		                           )
		        AND ALM_WORK_TC  = 'M' 
		        AND STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'
		        AND CUR_C        = 'KRW'
		        AND ORG_CLAS_C   = #{ORG_CLAS_C}  			 
		        
		        
		     -- ( 회계구분  )
			 -- 중앙회를 제외한 나머지는 신용회계(2102) 로 고정!
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
		 	
			 -- ( 점소코드  )
			 --************************************************
			 -- 전체조합 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == 'ALL'">
			 	-- 모든 점소코드 나오기
			 </if>
			 
			 -- 단위조합별 조회 시 (지소포함여부  yes/no)
			 <if test="JISO_INCLUDE == 'yes' and BLNG_HQ_BR_C != ''">   
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{BR_C} ) 
			 </if>
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C != ''"> 
			 	AND BR_C     = #{BR_C}
			 </if>
			 
			 -- 도지회별 조회 시 
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C != 'ALL' and BR_C != '001'">
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BR_C} )
			 </if>
			 
			 -- 중앙회 조회 시  
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == '001'">
				AND BR_C     = #{BR_C}
			 </if>
			 --************************************************
	)
	/* 조인할 보고서 계정명 */
	, TEMP3 AS(

		  SELECT 
                  SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%') AS STAT_RPRT_ITEM_NM_PATH
                , REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 1 )                              AS LVL1
                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 2 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL2
                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 3 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL3
                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 4 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL4
                , NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(STAT_RPRT_ITEM_NM), '%'),'[^%]+' , 1 , 5 ),TRIM(STAT_RPRT_ITEM_NM)) AS LVL5
                , STAT_RPRT_ITEM_NM
                , ORG_CLAS_C
                , STAT_RPRT_ID
                , STAT_RPRT_ITEM_ID
                , LEVEL AS LVL
                , TO_NUMBER(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 1 ) )                           AS PRNT_ORD1
                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 2 ),TRIM(PRNT_ORD)))        AS PRNT_ORD2
                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 3 ),TRIM(PRNT_ORD)))        AS PRNT_ORD3
                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 4 ),TRIM(PRNT_ORD)))        AS PRNT_ORD4
                , TO_NUMBER(NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(PRNT_ORD), '%'),'[^%]+' , 1 , 5 ),TRIM(PRNT_ORD)))        AS PRNT_ORD5
            FROM (
                    SELECT ORG_CLAS_C
                        , STAT_RPRT_ID
                        , STAT_RPRT_ITEM_ID
                        <if test="TAB_TC == 3">	 
                        , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
                            WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL +1) 
                            WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
                            WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL + 1)
                            WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                            WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                          END 																									 AS UP_STAT_RPRT_ITEM_ID
                        </if>
                        <if test="TAB_TC != 3">
                        , CASE WHEN STAT_RPRT_LVL = 1 THEN '-'
                            WHEN STAT_RPRT_LVL = 2 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1) 
                            WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '10' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                            WHEN STAT_RPRT_LVL = 3 AND ORG_CLAS_C = '30' THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL -1)
                            WHEN STAT_RPRT_LVL = 4 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                            WHEN STAT_RPRT_LVL = 5 THEN SUBSTR(STAT_RPRT_ITEM_ID, 0, STAT_RPRT_LVL)
                          END 																									 AS UP_STAT_RPRT_ITEM_ID
                        </if> 
                        , STAT_RPRT_ITEM_NM
                        , STAT_RPRT_LVL
                        , TOT_ITEM_YN
                        , PRNT_ORD
                    FROM TII_STAT_ANAL_RPRT_INFO
                   WHERE ORG_CLAS_C   = #{ORG_CLAS_C}  
                     AND STAT_RPRT_ID = 'R1' || #{TAB_TC} || '0'          -- 탭별로 보고서 아이디 바꾸기
                ) A
            START WITH UP_STAT_RPRT_ITEM_ID    = '-'
            CONNECT BY PRIOR STAT_RPRT_ITEM_ID = UP_STAT_RPRT_ITEM_ID 
                   AND PRIOR ORG_CLAS_C        = ORG_CLAS_C
                   AND PRIOR STAT_RPRT_ID      = STAT_RPRT_ID


	)
	
	/* 조회 */
		  SELECT 
			    Y1.LVL1                                                                        			  AS ACCT_NM1  		     
		    <if test="LVL == 1"></if> 
		    
		    <if test="LVL == 2">
       			<if test="ACCT_SUBJECT_LVL == 1">
		    		, DECODE( GROUPING_ID( Y1.LVL2 ), 1, Y1.LVL1 || ' 소계', Y1.LVL2 )  			   	      AS ACCT_NM2		   
		   	    	, GROUPING_ID( Y1.LVL2 )															  AS GRP_ID
       			</if>
       			<if test="ACCT_SUBJECT_LVL == 2">
       				,Y1.LVL2																			  AS ACCT_NM2
       			</if> 
		    </if>  
		    <if test="LVL == 3">
       			<if test="ACCT_SUBJECT_LVL == 1">
		    		, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3 ), 3 , Y1.LVL1 || ' 소계', Y1.LVL2 )  			  AS ACCT_NM2	
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3 ), 1 , Y1.LVL2 || ' 소계', Y1.LVL3 )  			  AS ACCT_NM3 	   
		   	    	, GROUPING_ID( Y1.LVL2, Y1.LVL3 )													  AS GRP_ID
       			</if>
       			<if test="ACCT_SUBJECT_LVL == 2">
		    		, Y1.LVL2																			  AS ACCT_NM2
		   			, DECODE( GROUPING_ID( Y1.LVL2, Y1.LVL3 ), 1 , Y1.LVL2 || ' 소계', Y1.LVL3 )  		  AS ACCT_NM3 	   
		   	    	, GROUPING_ID( Y1.LVL2, Y1.LVL3 )													  AS GRP_ID
       			</if> 
       			<if test="ACCT_SUBJECT_LVL == 3">
       				,Y1.LVL2																			  AS ACCT_NM2
       				,Y1.LVL3																			  AS ACCT_NM3
       			</if> 
		    </if>  
		    <if test="LVL == 4">
       			<if test="ACCT_SUBJECT_LVL == 1">
		    		, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 7 , Y1.LVL1 || ' 소계', Y1.LVL2 )  	  AS ACCT_NM2	
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 3 , Y1.LVL2 || ' 소계', Y1.LVL3 )  	  AS ACCT_NM3 	
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 1 , Y1.LVL3 || ' 소계', Y1.LVL4 )  	  AS ACCT_NM4 	   
		   	    	, GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 )											  AS GRP_ID
       			</if>
       			<if test="ACCT_SUBJECT_LVL == 2">
		    		, Y1.LVL2																			  AS ACCT_NM2
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 3 , Y1.LVL2 || ' 소계', Y1.LVL3 )  	  AS ACCT_NM3 	
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 1 , Y1.LVL3 || ' 소계', Y1.LVL4 )  	  AS ACCT_NM4 	   
		   	    	, GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 )											  AS GRP_ID
       			</if> 
       			<if test="ACCT_SUBJECT_LVL == 3">
		    		, Y1.LVL2																			  AS ACCT_NM2
		   			, Y1.LVL3  	  														    			  AS ACCT_NM3 	
		   			, DECODE( GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 ), 1 , Y1.LVL3 || ' 소계', Y1.LVL4 )  	  AS ACCT_NM4 	   
		   	    	, GROUPING_ID( Y1.LVL2,Y1.LVL3,Y1.LVL4 )											  AS GRP_ID
       			</if> 
       			<if test="ACCT_SUBJECT_LVL == 4">
       				, Y1.LVL2																	          AS ACCT_NM2
       				, Y1.LVL3																	  		  AS ACCT_NM3
       				, Y1.LVL4																			  AS ACCT_NM4
       			</if> 
		    </if>       
		  , SUM(     VIEW_BKPR_AMT1  )  AS           BKPR_AMT_1
          , SUM(      RPRT_ACC_CNT1  )  AS       RPRT_ACC_CNT_1
          , CASE WHEN NVL(SUM(BKPR_AMT1),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT1) / SUM(BKPR_AMT1) ,2)
            END                         		  AS      RPRT_AVG_RATE_1
          , ROUND( MAX(      RPRT_HG_RATE1  ),2)  AS       RPRT_HG_RATE_1
          , ROUND( MIN(     RPRT_MIN_RATE1  ),2)  AS      RPRT_MIN_RATE_1
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT2  )  AS           BKPR_AMT_2
          , SUM(      RPRT_ACC_CNT2  )  AS       RPRT_ACC_CNT_2
          , CASE WHEN NVL(SUM(BKPR_AMT2),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT2) / SUM(BKPR_AMT2) ,2)
            END                        			  AS      RPRT_AVG_RATE_2
          , ROUND( MAX(      RPRT_HG_RATE2  ),2)  AS       RPRT_HG_RATE_2
          , ROUND( MIN(     RPRT_MIN_RATE2  ),2)  AS      RPRT_MIN_RATE_2
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT3  )  AS           BKPR_AMT_3
          , SUM(      RPRT_ACC_CNT3  )  AS       RPRT_ACC_CNT_3
          , CASE WHEN NVL(SUM(BKPR_AMT3),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT3) / SUM(BKPR_AMT3) ,2)
            END                      		      AS      RPRT_AVG_RATE_3
          , ROUND( MAX(      RPRT_HG_RATE3  ),2)  AS       RPRT_HG_RATE_3
          , ROUND( MIN(     RPRT_MIN_RATE3  ),2)  AS      RPRT_MIN_RATE_3
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT4  )  AS           BKPR_AMT_4
          , SUM(      RPRT_ACC_CNT4  )  AS       RPRT_ACC_CNT_4
          , CASE WHEN NVL(SUM(BKPR_AMT4),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT4) / SUM(BKPR_AMT4) ,2)
            END                      		      AS      RPRT_AVG_RATE_4
          , ROUND( MAX(      RPRT_HG_RATE4  ),2)  AS       RPRT_HG_RATE_4
          , ROUND( MIN(     RPRT_MIN_RATE4  ),2)  AS      RPRT_MIN_RATE_4
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT5  )  AS           BKPR_AMT_5
          , SUM(      RPRT_ACC_CNT5  )  AS       RPRT_ACC_CNT_5
          , CASE WHEN NVL(SUM(BKPR_AMT5),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT5) / SUM(BKPR_AMT5) ,2)
            END                       			  AS      RPRT_AVG_RATE_5
          , ROUND( MAX(      RPRT_HG_RATE5  ),2)  AS       RPRT_HG_RATE_5
          , ROUND( MIN(     RPRT_MIN_RATE5  ),2)  AS      RPRT_MIN_RATE_5
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT6  )  AS           BKPR_AMT_6
          , SUM(      RPRT_ACC_CNT6  )  AS       RPRT_ACC_CNT_6
          , CASE WHEN NVL(SUM(BKPR_AMT6),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT6) / SUM(BKPR_AMT6) ,2)
            END                       			  AS      RPRT_AVG_RATE_6
          , ROUND( MAX(      RPRT_HG_RATE6  ),2)  AS       RPRT_HG_RATE_6
          , ROUND( MIN(     RPRT_MIN_RATE6  ),2)  AS      RPRT_MIN_RATE_6
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT7  )  AS           BKPR_AMT_7
          , SUM(      RPRT_ACC_CNT7  )  AS       RPRT_ACC_CNT_7
          , CASE WHEN NVL(SUM(BKPR_AMT7),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT7) / SUM(BKPR_AMT7) ,2)
            END                       			  AS      RPRT_AVG_RATE_7
          , ROUND( MAX(      RPRT_HG_RATE7  ),2)  AS       RPRT_HG_RATE_7
          , ROUND( MIN(     RPRT_MIN_RATE7  ),2)  AS      RPRT_MIN_RATE_7
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT8  )  AS           BKPR_AMT_8
          , SUM(      RPRT_ACC_CNT8  )  AS       RPRT_ACC_CNT_8
          , CASE WHEN NVL(SUM(BKPR_AMT8),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT8) / SUM(BKPR_AMT8) ,2)
            END                       			  AS      RPRT_AVG_RATE_8
          , ROUND( MAX(      RPRT_HG_RATE8  ),2)  AS       RPRT_HG_RATE_8
          , ROUND( MIN(     RPRT_MIN_RATE8  ),2)  AS      RPRT_MIN_RATE_8
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT9  )  AS           BKPR_AMT_9
          , SUM(      RPRT_ACC_CNT9  )  AS       RPRT_ACC_CNT_9
          , CASE WHEN NVL(SUM(BKPR_AMT9),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT9) / SUM(BKPR_AMT9) ,2)
            END                       			  AS      RPRT_AVG_RATE_9
          , ROUND( MAX(      RPRT_HG_RATE9  ),2)  AS       RPRT_HG_RATE_9
          , ROUND( MIN(     RPRT_MIN_RATE9  ),2)  AS      RPRT_MIN_RATE_9
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT10 )  AS           BKPR_AMT_10
          , SUM(      RPRT_ACC_CNT10 )  AS       RPRT_ACC_CNT_10
          , CASE WHEN NVL(SUM(BKPR_AMT10),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT10) / SUM(BKPR_AMT10) ,2)
            END                       			  AS      RPRT_AVG_RATE_10
          , ROUND( MAX(      RPRT_HG_RATE10 ),2)  AS       RPRT_HG_RATE_10
          , ROUND( MIN(     RPRT_MIN_RATE10 ),2)  AS      RPRT_MIN_RATE_10
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT11 )  AS           BKPR_AMT_11
          , SUM(      RPRT_ACC_CNT11 )  AS       RPRT_ACC_CNT_11
          , CASE WHEN NVL(SUM(BKPR_AMT11),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT11) / SUM(BKPR_AMT11) ,2)
            END                       			  AS      RPRT_AVG_RATE_11
          , ROUND( MAX(      RPRT_HG_RATE11 ),2)  AS       RPRT_HG_RATE_11
          , ROUND( MIN(     RPRT_MIN_RATE11 ),2)  AS      RPRT_MIN_RATE_11
          ------------------------------------------------------------
          , SUM(     VIEW_BKPR_AMT12 )  AS           BKPR_AMT_12
          , SUM(      RPRT_ACC_CNT12 )  AS       RPRT_ACC_CNT_12
          , CASE WHEN NVL(SUM(BKPR_AMT12),0) = 0 
                 THEN 0  
                 ELSE ROUND(SUM(BKPR_APLY_RATE_AMT12) / SUM(BKPR_AMT12) ,2)
            END                         		  AS      RPRT_AVG_RATE_12
          , ROUND( MAX(      RPRT_HG_RATE12 ),2)  AS       RPRT_HG_RATE_12
          , ROUND( MIN(     RPRT_MIN_RATE12 ),2)  AS      RPRT_MIN_RATE_12
      FROM
      
      	(
      	
      	   SELECT 
                  LVL1
                <if test = "LVL == 2">
                , LVL2
                </if>  
                <if test = "LVL == 3">
                , LVL2
                , LVL3
                </if>  
                <if test = "LVL == 4">
                , LVL2
                , LVL3
                , LVL4
                </if>
                /* 금액단위반영 잔액데이터 */  
             	, NVL(ROUND(SUM( BKPR_AMT_1  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT1
                , NVL(SUM(          BKPR_AMT_1  ), 0)                 AS BKPR_AMT1
                , NVL(SUM(      RPRT_ACC_CNT_1  ), 0)                 AS RPRT_ACC_CNT1
                , NVL(SUM(BKPR_APLY_RATE_AMT_1  ), 0)                 AS BKPR_APLY_RATE_AMT1
                , NVL(MAX(      RPRT_HG_RATE_1  ), 0)                 AS RPRT_HG_RATE1
                , NVL(MIN(     RPRT_MIN_RATE_1  ), 0)                 AS RPRT_MIN_RATE1
                , MAX( PRNT_ORD1 )                                    AS PRNT_ORD1 
                , MAX( PRNT_ORD2 )                                    AS PRNT_ORD2
                , MAX( PRNT_ORD3 )                                    AS PRNT_ORD3
                , MAX( PRNT_ORD4 )                                    AS PRNT_ORD4
             FROM TEMP1 A , TEMP3 B
            WHERE 1 = 1
              AND A.ORG_CLAS_C        = B.ORG_CLAS_C
              AND A.STAT_RPRT_ID      = B.STAT_RPRT_ID
              AND A.STAT_RPRT_ITEM_ID = B.STAT_RPRT_ITEM_ID
            GROUP BY
                  LVL1
                <if test = "LVL == 2">
                , LVL2
                </if>  
                <if test = "LVL == 3">
                , LVL2
                , LVL3
                </if>  
                <if test = "LVL == 4">
                , LVL2
                , LVL3
                , LVL4
                </if>
                  
      	)Y1
      	,
      	(
           SELECT 
                  LVL1
                <if test = "LVL == 2">
                , LVL2
                </if>  
                <if test = "LVL == 3">
                , LVL2
                , LVL3
                </if>  
                <if test = "LVL == 4">
                , LVL2
                , LVL3
                , LVL4
                </if>
                /* 금액단위반영 잔액데이터 */  
	            , NVL(ROUND(SUM( BKPR_AMT_2  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT2
	            , NVL(ROUND(SUM( BKPR_AMT_3  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT3
	            , NVL(ROUND(SUM( BKPR_AMT_4  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT4
	            , NVL(ROUND(SUM( BKPR_AMT_5  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT5
	            , NVL(ROUND(SUM( BKPR_AMT_6  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT6
	            , NVL(ROUND(SUM( BKPR_AMT_7  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT7
	            , NVL(ROUND(SUM( BKPR_AMT_8  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT8
	            , NVL(ROUND(SUM( BKPR_AMT_9  ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT9
	            , NVL(ROUND(SUM( BKPR_AMT_10 ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT10
	            , NVL(ROUND(SUM( BKPR_AMT_11 ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT11
	            , NVL(ROUND(SUM( BKPR_AMT_12 ) / #{AMT_UNIT} ), 0)    AS VIEW_BKPR_AMT12
	            , NVL(SUM(          BKPR_AMT_2  ), 0)                 AS           BKPR_AMT2
	            , NVL(SUM(      RPRT_ACC_CNT_2  ), 0)                 AS       RPRT_ACC_CNT2
	            , NVL(SUM(BKPR_APLY_RATE_AMT_2  ), 0)                 AS BKPR_APLY_RATE_AMT2
	            , NVL(MAX(      RPRT_HG_RATE_2  ), 0)                 AS       RPRT_HG_RATE2
	            , NVL(MIN(     RPRT_MIN_RATE_2  ), 0)                 AS      RPRT_MIN_RATE2
	            , NVL(SUM(          BKPR_AMT_3  ), 0)                 AS           BKPR_AMT3
	            , NVL(SUM(      RPRT_ACC_CNT_3  ), 0)                 AS       RPRT_ACC_CNT3
	            , NVL(SUM(BKPR_APLY_RATE_AMT_3  ), 0)                 AS BKPR_APLY_RATE_AMT3
	            , NVL(MAX(      RPRT_HG_RATE_3  ), 0)                 AS       RPRT_HG_RATE3
	            , NVL(MIN(     RPRT_MIN_RATE_3  ), 0)                 AS      RPRT_MIN_RATE3
	            , NVL(SUM(          BKPR_AMT_4  ), 0)                 AS           BKPR_AMT4
	            , NVL(SUM(      RPRT_ACC_CNT_4  ), 0)                 AS       RPRT_ACC_CNT4
	            , NVL(SUM(BKPR_APLY_RATE_AMT_4  ), 0)                 AS BKPR_APLY_RATE_AMT4
	            , NVL(MAX(      RPRT_HG_RATE_4  ), 0)                 AS       RPRT_HG_RATE4
	            , NVL(MIN(     RPRT_MIN_RATE_4  ), 0)                 AS      RPRT_MIN_RATE4
	            , NVL(SUM(          BKPR_AMT_5  ), 0)                 AS           BKPR_AMT5
	            , NVL(SUM(      RPRT_ACC_CNT_5  ), 0)                 AS       RPRT_ACC_CNT5
	            , NVL(SUM(BKPR_APLY_RATE_AMT_5  ), 0)                 AS BKPR_APLY_RATE_AMT5
	            , NVL(MAX(      RPRT_HG_RATE_5  ), 0)                 AS       RPRT_HG_RATE5
	            , NVL(MIN(     RPRT_MIN_RATE_5  ), 0)                 AS      RPRT_MIN_RATE5
	            , NVL(SUM(          BKPR_AMT_6  ), 0)                 AS           BKPR_AMT6
	            , NVL(SUM(      RPRT_ACC_CNT_6  ), 0)                 AS       RPRT_ACC_CNT6
	            , NVL(SUM(BKPR_APLY_RATE_AMT_6  ), 0)                 AS BKPR_APLY_RATE_AMT6
	            , NVL(MAX(      RPRT_HG_RATE_6  ), 0)                 AS       RPRT_HG_RATE6
	            , NVL(MIN(     RPRT_MIN_RATE_6  ), 0)                 AS      RPRT_MIN_RATE6
	            , NVL(SUM(          BKPR_AMT_7  ), 0)                 AS           BKPR_AMT7
	            , NVL(SUM(      RPRT_ACC_CNT_7  ), 0)                 AS       RPRT_ACC_CNT7
	            , NVL(SUM(BKPR_APLY_RATE_AMT_7  ), 0)                 AS BKPR_APLY_RATE_AMT7
	            , NVL(MAX(      RPRT_HG_RATE_7  ), 0)                 AS       RPRT_HG_RATE7
	            , NVL(MIN(     RPRT_MIN_RATE_7  ), 0)                 AS      RPRT_MIN_RATE7
	            , NVL(SUM(          BKPR_AMT_8  ), 0)                 AS           BKPR_AMT8
	            , NVL(SUM(      RPRT_ACC_CNT_8  ), 0)                 AS       RPRT_ACC_CNT8
	            , NVL(SUM(BKPR_APLY_RATE_AMT_8  ), 0)                 AS BKPR_APLY_RATE_AMT8
	            , NVL(MAX(      RPRT_HG_RATE_8  ), 0)                 AS       RPRT_HG_RATE8
	            , NVL(MIN(     RPRT_MIN_RATE_8  ), 0)                 AS      RPRT_MIN_RATE8
	            , NVL(SUM(          BKPR_AMT_9  ), 0)                 AS           BKPR_AMT9
	            , NVL(SUM(      RPRT_ACC_CNT_9  ), 0)                 AS       RPRT_ACC_CNT9
	            , NVL(SUM(BKPR_APLY_RATE_AMT_9  ), 0)                 AS BKPR_APLY_RATE_AMT9
	            , NVL(MAX(      RPRT_HG_RATE_9  ), 0)                 AS       RPRT_HG_RATE9
	            , NVL(MIN(     RPRT_MIN_RATE_9  ), 0)                 AS      RPRT_MIN_RATE9
	            , NVL(SUM(          BKPR_AMT_10 ), 0)                 AS           BKPR_AMT10
	            , NVL(SUM(      RPRT_ACC_CNT_10 ), 0)                 AS       RPRT_ACC_CNT10
	            , NVL(SUM(BKPR_APLY_RATE_AMT_10 ), 0)                 AS BKPR_APLY_RATE_AMT10
	            , NVL(MAX(      RPRT_HG_RATE_10 ), 0)                 AS       RPRT_HG_RATE10
	            , NVL(MIN(     RPRT_MIN_RATE_10 ), 0)                 AS      RPRT_MIN_RATE10
	            , NVL(SUM(          BKPR_AMT_11 ), 0)                 AS           BKPR_AMT11
	            , NVL(SUM(      RPRT_ACC_CNT_11 ), 0)                 AS       RPRT_ACC_CNT11
	            , NVL(SUM(BKPR_APLY_RATE_AMT_11 ), 0)                 AS BKPR_APLY_RATE_AMT11
	            , NVL(MAX(      RPRT_HG_RATE_11 ), 0)                 AS       RPRT_HG_RATE11
	            , NVL(MIN(     RPRT_MIN_RATE_11 ), 0)                 AS      RPRT_MIN_RATE11
	            , NVL(SUM(          BKPR_AMT_12 ), 0)                 AS           BKPR_AMT12
	            , NVL(SUM(      RPRT_ACC_CNT_12 ), 0)                 AS       RPRT_ACC_CNT12
	            , NVL(SUM(BKPR_APLY_RATE_AMT_12 ), 0)                 AS BKPR_APLY_RATE_AMT12
	            , NVL(MAX(      RPRT_HG_RATE_12 ), 0)                 AS       RPRT_HG_RATE12
	            , NVL(MIN(     RPRT_MIN_RATE_12 ), 0)                 AS      RPRT_MIN_RATE12
                , MAX( PRNT_ORD1 )                                   AS PRNT_ORD1 
                , MAX( PRNT_ORD2 )                                   AS PRNT_ORD2
                , MAX( PRNT_ORD3 )                                   AS PRNT_ORD3
                , MAX( PRNT_ORD4 )                                   AS PRNT_ORD4
             FROM TEMP2 A, TEMP3 B
            WHERE 1 = 1
              AND A.ORG_CLAS_C        = B.ORG_CLAS_C
              AND A.STAT_RPRT_ID      = B.STAT_RPRT_ID
              AND A.STAT_RPRT_ITEM_ID = B.STAT_RPRT_ITEM_ID
            GROUP BY
                  LVL1
                <if test = "LVL == 2">
                , LVL2
                </if>  
                <if test = "LVL == 3">
                , LVL2
                , LVL3
                </if>  
                <if test = "LVL == 4">
                , LVL2
                , LVL3
                , LVL4
                </if> 
         )Y2
		 WHERE 1 = 1
		  <if test="LVL == 1">
		   AND Y1.LVL1 = Y2.LVL1(+)
   		   AND Y1.LVL1 = #{ACCT_SUBJECT} 	  
   		  </if>
   		  <if test="LVL == 2">
		   AND Y1.LVL1 = Y2.LVL1(+)
		   AND Y1.LVL2 = Y2.LVL2(+)
   			  <if test="ACCT_SUBJECT_LVL == 1">
   			 	  AND Y1.LVL1  = #{ACCT_SUBJECT}
   			  </if>
   			  <if test="ACCT_SUBJECT_LVL == 2">
   			 	  AND Y1.LVL2  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   			  </if> 	
   		  </if>
   		  <if test="LVL == 3">
		   AND Y1.LVL1 = Y2.LVL1(+)
		   AND Y1.LVL2 = Y2.LVL2(+)
		   AND Y1.LVL3 = Y2.LVL3(+)
   			  <if test="ACCT_SUBJECT_LVL == 1">
   				  AND Y1.LVL1  = #{ACCT_SUBJECT}
   			  </if>
   			  <if test="ACCT_SUBJECT_LVL == 2">
   				  AND Y1.LVL2  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   			  </if> 	
   			  <if test="ACCT_SUBJECT_LVL == 3">
   				  AND Y1.LVL3  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL2  = #{parentAcctNm2}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   		  </if> 	
   		  </if>
   		  <if test="LVL == 4">
		   AND Y1.LVL1 = Y2.LVL1(+)
		   AND Y1.LVL2 = Y2.LVL2(+)
		   AND Y1.LVL3 = Y2.LVL3(+)
		   AND Y1.LVL4 = Y2.LVL4(+)
   			  <if test="ACCT_SUBJECT_LVL == 1">
   				  AND Y1.LVL1  = #{ACCT_SUBJECT}
   			  </if>
   			  <if test="ACCT_SUBJECT_LVL == 2">
   				  AND Y1.LVL2  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   			  </if> 	
   			  <if test="ACCT_SUBJECT_LVL == 3">
   				  AND Y1.LVL3  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL2  = #{parentAcctNm2}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   		  	 </if> 	
   			  <if test="ACCT_SUBJECT_LVL == 4">
   				  AND Y1.LVL4  = #{ACCT_SUBJECT}
   			 	  AND Y1.LVL3  = #{parentAcctNm3}
   			 	  AND Y1.LVL2  = #{parentAcctNm2}
   			 	  AND Y1.LVL1  = #{parentAcctNm1}
   		  	</if> 	
   		  </if>
   		
   		    
		    GROUP BY 
          <if test="LVL == 1">
          		Y1.LVL1
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
          </if>
          <if test="LVL == 2">
	    	  <if test="ACCT_SUBJECT_LVL == 1">
	    		Y1.LVL1 ,ROLLUP( Y1.LVL2 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , GRP_ID
			  </if>
			  <if test="ACCT_SUBJECT_LVL == 2">
	    		Y1.LVL1 ,Y1.LVL2
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
	    	  </if> 	
    	  </if>
    	  <if test="LVL == 3">
    		  <if test="ACCT_SUBJECT_LVL == 1">
    			Y1.LVL1 ,ROLLUP( Y1.LVL2 ,Y1.LVL3 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , GRP_ID
    		  </if>
    		  <if test="ACCT_SUBJECT_LVL == 2">
    			Y1.LVL1 ,Y1.LVL2 , ROLLUP( Y1.LVL3 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , GRP_ID
    		  </if> 	
    		  <if test="ACCT_SUBJECT_LVL == 3">
	    		Y1.LVL1 ,Y1.LVL2 , Y1.LVL3
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
    		  </if> 	
    	  </if>
    	  <if test="LVL == 4">
    		  <if test="ACCT_SUBJECT_LVL == 1">
    			Y1.LVL1 ,ROLLUP( Y1.LVL2 ,Y1.LVL3 ,Y1.LVL4 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , MAX(Y1.PRNT_ORD4)
		        , GRP_ID
    		  </if>
    		  <if test="ACCT_SUBJECT_LVL == 2">
    			Y1.LVL1 ,Y1.LVL2 ,ROLLUP( Y1.LVL3 ,Y1.LVL4 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , MAX(Y1.PRNT_ORD4)
		        , GRP_ID
    		  </if> 	
    		  <if test="ACCT_SUBJECT_LVL == 3">
    			Y1.LVL1 ,Y1.LVL2 ,Y1.LVL3 ,ROLLUP( Y1.LVL4 )
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , MAX(Y1.PRNT_ORD4)
		        , GRP_ID
    		  </if> 	
    		  <if test="ACCT_SUBJECT_LVL == 4">
    			Y1.LVL1 ,Y1.LVL2 ,Y1.LVL3 ,Y1.LVL4 
		    ORDER BY 
		          MAX(Y1.PRNT_ORD1)
		        , MAX(Y1.PRNT_ORD2)
		        , MAX(Y1.PRNT_ORD3)
		        , MAX(Y1.PRNT_ORD4)
    		  </if> 	
    	  </if>
    	 
		

	</select>
	
  


</mapper>