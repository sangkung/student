<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.almweb.mapper.TR_6201Mapper">


	<sql id="tr_6201With">
			
	WITH PROCUREMENT AS (
		
		SELECT
		      A.BASE_DATE                   AS B_BASE_DATE             
		    , A.ALM_WORK_TC                 AS B_ALM_WORK_TC           
		    , A.ORG_CLAS_C                  AS B_ORG_CLAS_C            
		    , A.BR_C                        AS B_BR_C                  
		    , A.CUR_C                       AS B_CUR_C                 
		    , A.AC_BUSI_TC                  AS B_AC_BUSI_TC            
		    , A.ACCT_C                      AS B_ACCT_C                
		    , A.BKPR_AMT                    AS B_BKPR_AMT              
		    , A.NEW_BKPR_AMT                AS B_NEW_BKPR_AMT          
		    , A.BKPR_APLY_RATE_AMT          AS B_BKPR_APLY_RATE_AMT    
		    , A.NEW_BKPR_APLY_RATE_AMT      AS B_NEW_BKPR_APLY_RATE_AMT
		    -------------------------------- ▲ 기준일자  ▼ 기준일자 기준 MAX전월
		    , B.BASE_DATE                   AS MAX_P_M_BASE_DATE
		    , B.ACCT_C                      AS MAX_P_M_ACCT_C       
		    , NVL(B.BKPR_AMT          ,0)   AS MAX_P_M_BKPR_AMT               
		    , NVL(B.BKPR_APLY_RATE_AMT,0)   AS MAX_P_M_BKPR_APLY_RATE_AMT
		FROM
		(
		    -- 기준일자
		    SELECT 
		          BASE_DATE
		        , ALM_WORK_TC
		        , ORG_CLAS_C
		        , BR_C
		        , CUR_C
			 	<if test="AC_BUSI_TC == '0000'">
			 	, '1105' AS AC_BUSI_TC
			 	</if>
			 	<if test="AC_BUSI_TC != '0000'">
			 	, AC_BUSI_TC
			 	</if>
		        , ACCT_C
		        --------------------------------------------------기준일
		        , NVL(BKPR_AMT              ,0) AS BKPR_AMT              
		        , NVL(NEW_BKPR_AMT          ,0) AS NEW_BKPR_AMT          
		        , NVL(BKPR_APLY_RATE_AMT    ,0) AS BKPR_APLY_RATE_AMT    
		        , NVL(NEW_BKPR_APLY_RATE_AMT,0) AS NEW_BKPR_APLY_RATE_AMT
		        --------------------------------------------------
		     FROM TSR_SPLY_OPR_STAT 
		    WHERE ALM_WORK_TC = 'D'
		      AND CUR_C       = 'KRW'
		      AND ORG_CLAS_C  = #{ORG_CLAS_C}
		      AND BASE_DATE   = #{BASE_DATE} 
			 -- ( 회계구분  )
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
			 
			 
			 -- ( 점소코드  )
			 --************************************************
			 -- 전체조합 조회 시 
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == 'ALL'">
			 	-- 모든 점소코드 나오기
			 </if>
			 
			 -- 단위조합별 조회 시 (지소포함여부  yes/no)
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'yes' and BLNG_HQ_BR_C != ''">   
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{BR_C} ) 
			 </if>
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C != ''"> 
			 	AND BR_C     = #{BR_C}
			 </if>
			 
			 -- 도지회별 조회 시 
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C != 'ALL' and BR_C != '001'">
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BR_C} )
			 </if>
			 
			 -- 중앙회 조회 시  
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == '001'">
				AND BR_C     = #{BR_C}
			 </if>
			 --************************************************
		) A
		LEFT JOIN
		( 
		    -- 기준일자 기준 전월   
		    SELECT 
		          BASE_DATE
		        , ALM_WORK_TC
		        , ORG_CLAS_C
		        , BR_C
		        , CUR_C
			 	<if test="AC_BUSI_TC == '0000'">
			 	, '1105' AS AC_BUSI_TC
			 	</if>
			 	<if test="AC_BUSI_TC != '0000'">
			 	, AC_BUSI_TC
			 	</if>
		        , ACCT_C
		        --------------------------------------------------
		        , BKPR_AMT            
		        , BKPR_APLY_RATE_AMT
		        --------------------------------------------------
		     FROM TSR_SPLY_OPR_STAT 
		    WHERE ALM_WORK_TC = 'M'
		      AND CUR_C       = 'KRW'
		      AND ORG_CLAS_C  = #{ORG_CLAS_C}
		      AND BASE_DATE   = TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE('20230713','YYYYMMDD'),-1)),'YYYYMMDD')
			 -- ( 회계구분  )
			 --************************************************
			 /* 중앙회 조회 시 에만 발생  */
		 	<if test="AC_BUSI_TC == '0000'">
		 		AND AC_BUSI_TC IN('1105','1106','1107')
		 	</if>
		 	<if test="AC_BUSI_TC != '0000'">
		 		AND AC_BUSI_TC = #{AC_BUSI_TC}
		 	</if>
			 --************************************************
			 
			 
			 -- ( 점소코드  )
			 --************************************************
			 -- 전체조합 조회 시 
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == 'ALL'">
			 	-- 모든 점소코드 나오기
			 </if>
			 
			 -- 단위조합별 조회 시 (지소포함여부  yes/no)
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'yes' and BLNG_HQ_BR_C != ''">   
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{BR_C} ) 
			 </if>
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C != ''"> 
			 	AND BR_C     = #{BR_C}
			 </if>
			 
			 -- 도지회별 조회 시 
			 -- 신용회계 고정(2102)
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C != 'ALL' and BR_C != '001'">
			 	AND BR_C IN ( SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{BR_C} )
			 </if>
			 
			 -- 중앙회 조회 시  
			 <if test="JISO_INCLUDE == 'no' and BLNG_HQ_BR_C == '' and BR_C == '001'">
				AND BR_C     = #{BR_C}
			 </if>
			 --************************************************
		)B
		ON 1=1
		  AND A.ACCT_C     = B.ACCT_C    (+)
		  AND A.CUR_C      = B.CUR_C	 (+)
		  AND A.ORG_CLAS_C = B.ORG_CLAS_C(+)
		  AND A.AC_BUSI_TC = B.AC_BUSI_TC(+)
		  AND A.BR_C       = B.BR_C		 (+)
		)
	
	</sql>


    <!-- 조달운용 현황 조회(잔액)  -->
	<select id = "selectTR_6201" parameterType="java.util.Map" resultType="java.util.HashMap">
	
	   	<include refid="tr_6201With"></include>
		   
		SELECT
	     	LVL1                                                                                                         		 AS ACCT_NM1
	     	<if test="LVL == 2">
	    	,DECODE( GROUPING_ID( LVL2 ), 1  , LVL1 || ' 소계', LVL2 )                            								 AS ACCT_NM2
	    	,GROUPING_ID( LVL2 )                                                               									 AS GRP_ID   
	     	</if>
	     	<if test="LVL == 3">
	    	,DECODE( GROUPING_ID( LVL2,LVL3 ), 3  , LVL1 || ' 소계', LVL2 )                            							 AS ACCT_NM2
	    	,DECODE( GROUPING_ID( LVL2,LVL3 ), 1  , LVL2 || ' 소계', LVL3 )                            							 AS ACCT_NM3
	    	,GROUPING_ID( LVL2,LVL3 )                                                               							 AS GRP_ID
	     	</if>
	     	<if test="LVL == 4">
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4 ), 7  , LVL1 || ' 소계', LVL2 )                            						 AS ACCT_NM2
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4 ), 3  , LVL2 || ' 소계', LVL3 )                            						 AS ACCT_NM3
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4 ), 1  , LVL3 || ' 소계', LVL4 )                            						 AS ACCT_NM4
	    	,GROUPING_ID( LVL2,LVL3,LVL4 )                                                               						 AS GRP_ID
	     	</if>
	     	<if test="LVL == 5">
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5 ), 15 , LVL1 || ' 소계', LVL2 )                            					 AS ACCT_NM2
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5 ), 7  , LVL2 || ' 소계', LVL3 )                            					 AS ACCT_NM3
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5 ), 3  , LVL3 || ' 소계', LVL4 )                            					 AS ACCT_NM4
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5 ), 1  , LVL4 || ' 소계', LVL5 )                            					 AS ACCT_NM5
	    	,GROUPING_ID( LVL2,LVL3,LVL4,LVL5   )                                                               				 AS GRP_ID
	     	</if>
	     	<if test="LVL == 6">
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 ), 31 , LVL1 || ' 소계', LVL2 )                            			 AS  ACCT_NM2
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 ), 15 , LVL2 || ' 소계', LVL3 )                            			 AS  ACCT_NM3
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 ), 7  , LVL3 || ' 소계', LVL4 )                           		    	 AS  ACCT_NM4
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 ), 3  , LVL4 || ' 소계', LVL5 )                            			 AS  ACCT_NM5
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 ), 1  , LVL5 || ' 소계', LVL6 )                            			 AS  ACCT_NM6
	    	,GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6 )                                                               				 AS  GRP_ID
	     	</if>
	     	<if test="LVL == 7">
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 63 , LVL1 || ' 소계', LVL2 )                            		 AS ACCT_NM2
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 31 , LVL2 || ' 소계', LVL3 )                           		 AS ACCT_NM3
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 15 , LVL3 || ' 소계', LVL4 )                            		 AS ACCT_NM4
	   	 	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 7  , LVL4 || ' 소계', LVL5 )                            		 AS ACCT_NM5
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 3  , LVL5 || ' 소계', LVL6 )                            		 AS ACCT_NM6
	    	,DECODE( GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7 ), 1  , LVL6 || ' 소계', LVL7 )                            		 AS ACCT_NM7
	    	,GROUPING_ID( LVL2,LVL3,LVL4,LVL5,LVL6,LVL7   )                                                                  	 AS GRP_ID   
	     	</if> 
		    ----------------------------------------------기준일  
		    , SUM( B_BKPR_AMT_VIEW      )                                                                                        AS AMT
		    , SUM( B_NEW_BKPR_AMT_VIEW  )                                                                                        AS NEW_AMT
		    , CASE WHEN NVL(SUM(B_BKPR_AMT),0) = 0 THEN 0 ELSE ROUND( SUM(B_BKPR_APLY_RATE_AMT) / SUM(B_BKPR_AMT) ,2) END		 AS AVG_RATE
		    , CASE 
		    	WHEN NVL(SUM(B_NEW_BKPR_AMT),0) = 0 THEN 0 
		      	ELSE ROUND( SUM(B_NEW_BKPR_APLY_RATE_AMT) / SUM(B_NEW_BKPR_AMT) ,2) 
		      END		 																										 AS NEW_AVG_RATE
		    ----------------------------------------------전월  
		    , SUM( MAX_P_M_BKPR_AMT_VIEW)                                                                                        AS PREV_M_AMT
		    , CASE 
		    	WHEN NVL(SUM(MAX_P_M_BKPR_AMT),0) = 0 THEN 0 
		      	ELSE ROUND( SUM(MAX_P_M_BKPR_APLY_RATE_AMT) / SUM(MAX_P_M_BKPR_AMT) ,2) 
		      END		 																										 AS PREV_M_AVG_RATE
		    ----------------------------------------------  
	FROM 
	(
	    SELECT
	         LVL1
     	<if test="LVL == 2">
        	,LVL2 
     	</if>
     	<if test="LVL == 3">
        	,LVL2 
        	,LVL3
     	</if>
     	<if test="LVL == 4">
        	,LVL2 
        	,LVL3
        	,LVL4
     	</if>
     	<if test="LVL == 5">
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
     	</if>
     	<if test="LVL == 6">
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
        	,LVL6
     	</if>
     	<if test="LVL == 7"> 
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
        	,LVL6
        	,LVL7
     	</if>      
	        ,ROUND(SUM(B_BKPR_AMT          	   ) / TO_NUMBER(#{AMT_UNIT}) )     			   AS B_BKPR_AMT_VIEW           -- 화면용	
	        ,ROUND(SUM(B_NEW_BKPR_AMT     	   ) / TO_NUMBER(#{AMT_UNIT}) )     			   AS B_NEW_BKPR_AMT_VIEW       -- 화면용 
	        ,ROUND(SUM(MAX_P_M_BKPR_AMT    	   ) / TO_NUMBER(#{AMT_UNIT}) )     			   AS MAX_P_M_BKPR_AMT_VIEW     -- 화면용  
		    ---------------------------------------------------------------------------------------
	        ,SUM(B_BKPR_AMT                )             	   AS B_BKPR_AMT                -- 계산용
	        ,SUM(B_NEW_BKPR_AMT            )            	   AS B_NEW_BKPR_AMT            -- 계산용
	        ,SUM(B_BKPR_APLY_RATE_AMT      )            	   AS B_BKPR_APLY_RATE_AMT
	        ,SUM(B_NEW_BKPR_APLY_RATE_AMT  )            	   AS B_NEW_BKPR_APLY_RATE_AMT
	        ,SUM(MAX_P_M_BKPR_AMT          )            	   AS MAX_P_M_BKPR_AMT          -- 계산용
	        ,SUM(MAX_P_M_BKPR_APLY_RATE_AMT)             	   AS MAX_P_M_BKPR_APLY_RATE_AMT
	        ,MAX(PRNT_ORD1)                                    AS PRNT_ORD1
	        ,MAX(PRNT_ORD2)                                    AS PRNT_ORD2
	        ,MAX(PRNT_ORD3)                                    AS PRNT_ORD3
	        ,MAX(PRNT_ORD4)                                    AS PRNT_ORD4
	        ,MAX(PRNT_ORD5)                                    AS PRNT_ORD5
	        ,MAX(PRNT_ORD6)                                    AS PRNT_ORD6
	        ,MAX(PRNT_ORD7)                                    AS PRNT_ORD7
	    FROM 
	    (
	        SELECT
	             B.LVL1
	            ,B.LVL2 
	            ,B.LVL3
	            ,B.LVL4
	            ,B.LVL5
	            ,B.LVL6
	            ,B.LVL7
	            ,B.ACCT_LVL
	            ,A.B_BASE_DATE             
	            ,A.B_ALM_WORK_TC           
	            ,A.B_ORG_CLAS_C            
	            ,A.B_BR_C                  
	            ,A.B_CUR_C                 
	            ,A.B_AC_BUSI_TC            
	            ,A.B_ACCT_C                
	            ,A.B_BKPR_AMT              
	            ,A.B_NEW_BKPR_AMT          
	            ,A.B_BKPR_APLY_RATE_AMT    
	            ,A.B_NEW_BKPR_APLY_RATE_AMT
	            ,A.MAX_P_M_BASE_DATE
	            ,A.MAX_P_M_ACCT_C       
	            ,A.MAX_P_M_BKPR_AMT          
	            ,A.MAX_P_M_BKPR_APLY_RATE_AMT
	            ,B.PRNT_ORD1
	            ,B.PRNT_ORD2
	            ,B.PRNT_ORD3
	            ,B.PRNT_ORD4
	            ,B.PRNT_ORD5 
	            ,B.PRNT_ORD6
	            ,B.PRNT_ORD7
	        FROM  PROCUREMENT A
	        ,(
	            SELECT
	                  REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 1 )  AS LVL1 
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 2 ),TRIM(ACCT_C_NM))  AS LVL2  
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 3 ),TRIM(ACCT_C_NM))  AS LVL3  
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 4 ),TRIM(ACCT_C_NM))  AS LVL4  
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 5 ),TRIM(ACCT_C_NM))  AS LVL5  
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 6 ),TRIM(ACCT_C_NM))  AS LVL6 
	                , NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(ACCT_C_NM) , '%' ) , '[^%]+' , 1 , 7 ),TRIM(ACCT_C_NM))  AS LVL7 
	                , TRIM(ACCT_C_NM)                                                                                       AS ACCT_C_NM
	                , ORG_CLAS_C
	                , AC_BUSI_TC
	                , ACCT_C
	                , ACCT_LVL
	                , REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 1 )  AS PRNT_ORD1 
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 2 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD2  
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 3 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD3  
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 4 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD4  
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 5 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD5  
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 6 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD6  
	                , TO_NUMBER(    NVL(REGEXP_SUBSTR( SYS_CONNECT_BY_PATH( TRIM(PRNT_ORD) , '%' ) , '[^%]+' , 1 , 7 ),TRIM(PRNT_ORD))    ) AS PRNT_ORD7  
	            FROM  TSY_ACCT_MSTR_MNG
	            WHERE BASE_DATE = ( SELECT MAX(BASE_DATE) FROM TSY_ACCT_MSTR_MNG WHERE BASE_DATE  &lt;= #{BASE_DATE} )
	            START WITH UP_ACCT_C = '0000000'
	            CONNECT BY PRIOR ACCT_C = UP_ACCT_C AND PRIOR BASE_DATE = BASE_DATE AND PRIOR ORG_CLAS_C = ORG_CLAS_C AND PRIOR AC_BUSI_TC = AC_BUSI_TC
	        )B
	        WHERE 1=1
	          AND A.B_ACCT_C     = B.ACCT_C 
	          AND A.B_ORG_CLAS_C = B.ORG_CLAS_C 
	          AND A.B_AC_BUSI_TC = B.AC_BUSI_TC  
			  AND SUBSTR( A.B_ACCT_C, 1, 1) != '3' -- 자본(과목) 빼기
	    )  
	    GROUP BY 
	         LVL1
     	<if test="LVL == 2">
        	,LVL2 
     	</if>
     	<if test="LVL == 3">
        	,LVL2 
        	,LVL3
     	</if>
     	<if test="LVL == 4">
        	,LVL2 
        	,LVL3
        	,LVL4
     	</if>
     	<if test="LVL == 5">
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
     	</if>
     	<if test="LVL == 6">
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
        	,LVL6
     	</if>
     	<if test="LVL == 7"> 
        	,LVL2 
        	,LVL3
        	,LVL4
        	,LVL5
        	,LVL6
        	,LVL7
     	</if> 
	)
	GROUP BY
			LVL1
			<if test="LVL == 1">
				ORDER BY 
					MAX(PRNT_ORD1)
			</if> 	    
		    <if test="LVL == 2">
		    	, ROLLUP( LVL2 )
				ORDER BY
				    MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,GRP_ID
		    </if>
		    <if test="LVL == 3">
		    	, ROLLUP( LVL2, LVL3 )
				ORDER BY
				    MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,MAX(PRNT_ORD3)
				    ,GRP_ID
		    </if>
		    <if test="LVL == 4">
		    	, ROLLUP( LVL2, LVL3, LVL4 )
				ORDER BY
				    MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,MAX(PRNT_ORD3)
				    ,MAX(PRNT_ORD4)
				    ,GRP_ID
		    </if>
		    <if test="LVL == 5">
		    	, ROLLUP( LVL2, LVL3, LVL4, LVL5 )
				ORDER BY
				    MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,MAX(PRNT_ORD3)
				    ,MAX(PRNT_ORD4)
				    ,MAX(PRNT_ORD5)
				    ,GRP_ID
		    </if>
		    <if test="LVL == 6">
		    	, ROLLUP( LVL2, LVL3, LVL4, LVL5, LVL6 )
				ORDER BY
				    MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,MAX(PRNT_ORD3)
				    ,MAX(PRNT_ORD4)
				    ,MAX(PRNT_ORD5)
				    ,MAX(PRNT_ORD6)
				    ,GRP_ID
		    </if>
		    <if test="LVL == 7">
		   		, ROLLUP( LVL2, LVL3, LVL4, LVL5, LVL6, LVL7 )
				ORDER BY
				     MAX(PRNT_ORD1)
				    ,MAX(PRNT_ORD2)
				    ,MAX(PRNT_ORD3)
				    ,MAX(PRNT_ORD4)
				    ,MAX(PRNT_ORD5)
				    ,MAX(PRNT_ORD6)
				    ,MAX(PRNT_ORD7)
				    ,GRP_ID
		    </if>
	    

	
	</select>



</mapper>