<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.app.almweb.mapper.TR_3106Mapper">

	<!-- 요구불예수금내역 조회  -->
	<select id="selectRgltLqdtDmdpList" parameterType="java.util.Map" resultType="java.util.HashMap">
		WITH DATA_TB AS (
		    SELECT 
		        BASE_DATE
		        , ORG_CLAS_C
		        , AC_BUSI_TC
		        , A.BR_C
		        , ACCT_C
		        , CASE WHEN A.BASE_DATE = #{sch_base_date} THEN BKPR_AMT ELSE 0 END AS BKPR_AMT
		        , CASE WHEN A.BASE_DATE = #{sch_base_date} THEN MMW_AVG_BAL ELSE 0 END AS M0_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -1),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M1_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -2),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M2_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -3),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M3_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -4),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M4_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -5),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M5_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -6),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M6_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -7),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M7_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -8),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M8_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -9),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M9_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -10),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M10_MMW_AVG_BAL
		        , CASE WHEN A.BASE_DATE = TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -11),'YYYYMMDD') THEN MMW_AVG_BAL ELSE 0 END AS M11_MMW_AVG_BAL
		    FROM TIG_BS_RSLT_TOT_M A
		    JOIN TTL_BR_C_INFO C
                ON C.BR_C = A.BR_C
            WHERE BASE_DATE BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(#{sch_base_date},'YYYYMMDD'), -12),'YYYYMMDD') AND #{sch_base_date}
		<if test='sch_br_c == "ALL"'>
			AND C.BR_C IN (SELECT BR_C FROM TTL_BR_C_INFO WHERE BR_TC = '03') /*전체조합*/
		</if>
		<if test="sch_br_c != 'ALL'">
			<if test="sch_br_c == '001'">
			AND C.BR_C = '001' /*중앙회*/
			</if>
			<if test="sch_br_c != '001' and (sch_blng_hq_br_c == '' or sch_blng_hq_br_c == null)">
			AND C.BR_C IN (SELECT BR_C FROM TTL_BR_C_INFO WHERE BLNG_HQ_BR_C = #{sch_br_c}) /*도지회별합산*/
			</if>
			<if test="sch_br_c != '001' and sch_blng_hq_br_c != '' and sch_blng_hq_br_c != null and sch_sub_yn == 'Y'.toString()">
			AND C.BR_C IN (SELECT BR_C FROM TTL_BR_C_INFO WHERE MO_BR_C = #{sch_br_c}) /*단위조합별조회(지소포함)*/
			</if>
			<if test="sch_br_c != '001' and sch_blng_hq_br_c != '' and sch_blng_hq_br_c != null and sch_sub_yn == 'N'.toString()">
			AND C.MO_BR_C = (SELECT MO_BR_C FROM TTL_BR_C_INFO WHERE BR_C = #{sch_br_c}) /*단위조합 모점소 기준으로 합산*/ 
			</if>
		</if>
		<choose>
			<when test="sch_ac_busi_tc == '0000'">
			AND AC_BUSI_TC IN ('1105', '1106', '1107') --회계구분
			</when>
			<otherwise>
			AND AC_BUSI_TC = #{sch_ac_busi_tc} --회계구분
			</otherwise>
		</choose>
		)
		SELECT
			MAX(BASE_DATE) AS BASE_DATE 
		    , LVL1 AS ACCT_C_NM1
		<if test="sch_acc_tc_lvl == 1">
			, 0 AS GRP_ID	
		</if>
		<if test="sch_acc_tc_lvl == 2">
			, DECODE(GROUPING_ID (LVL2), 1, LVL1||' 소계', LVL2) AS ACCT_C_NM2 
			, GROUPING_ID (LVL2) AS GRP_ID
		</if>
		<if test="sch_acc_tc_lvl == 3">
			, DECODE(GROUPING_ID (LVL2, LVL3), 3, LVL1||' 소계', LVL2) AS ACCT_C_NM2 
			, DECODE(GROUPING_ID (LVL2, LVL3), 1, LVL2||' 소계', LVL3) AS ACCT_C_NM3 
			, GROUPING_ID (LVL2, LVL3) AS GRP_ID
		</if>
		<if test="sch_acc_tc_lvl == 4">
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4), 7, LVL1||' 소계', LVL2) AS ACCT_C_NM2 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4), 3, LVL2||' 소계', LVL3) AS ACCT_C_NM3 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4), 1, LVL3||' 소계', LVL4) AS ACCT_C_NM4
			, GROUPING_ID (LVL2, LVL3, LVL4) AS GRP_ID
		</if>
		<if test="sch_acc_tc_lvl == 5">
		    , DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5), 15, LVL1||'소계', LVL2) AS ACCT_C_NM2 
		    , DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5), 7, LVL2||' 소계', LVL3) AS ACCT_C_NM3 
		    , DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5), 3, LVL3||' 소계', LVL4) AS ACCT_C_NM4 
		    , DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5), 1, LVL4||' 소계', LVL5) AS ACCT_C_NM5
			, GROUPING_ID (LVL2, LVL3, LVL4, LVL5) AS GRP_ID
		</if>
		<if test="sch_acc_tc_lvl == 6">
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6), 31, LVL1||' 소계', LVL2) AS ACCT_C_NM2 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6), 15, LVL2||' 소계', LVL3) AS ACCT_C_NM3 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6), 7, LVL3||' 소계', LVL4) AS ACCT_C_NM4 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6), 3, LVL4||' 소계', LVL5) AS ACCT_C_NM5 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6), 1, LVL5||' 소계', LVL6) AS ACCT_C_NM6
			, GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6) AS GRP_ID
		</if>
		<if test="sch_acc_tc_lvl == 7">
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 63, LVL1||' 소계', LVL2) AS ACCT_C_NM2
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 31, LVL2||' 소계', LVL3) AS ACCT_C_NM3 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 15, LVL3||' 소계', LVL4) AS ACCT_C_NM4 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 7, LVL4||' 소계', LVL5) AS ACCT_C_NM5 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 3, LVL5||' 소계', LVL6) AS ACCT_C_NM6 
			, DECODE(GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7), 1, LVL6||' 소계', LVL7) AS ACCT_C_NM7
			, GROUPING_ID (LVL2, LVL3, LVL4, LVL5, LVL6, LVL7) AS GRP_ID
		</if>			
		    , SUM(BKPR_AMT) AS BKPR_AMT
		    , SUM(M0_MMW_AVG_BAL) AS M0_MMW_AVG_BAL
		    , SUM(M1_MMW_AVG_BAL) AS M1_MMW_AVG_BAL
		    , SUM(M2_MMW_AVG_BAL) AS M2_MMW_AVG_BAL
		    , SUM(M3_MMW_AVG_BAL) AS M3_MMW_AVG_BAL
		    , SUM(M4_MMW_AVG_BAL) AS M4_MMW_AVG_BAL
		    , SUM(M5_MMW_AVG_BAL) AS M5_MMW_AVG_BAL
		    , SUM(M6_MMW_AVG_BAL) AS M6_MMW_AVG_BAL
		    , SUM(M7_MMW_AVG_BAL) AS M7_MMW_AVG_BAL
		    , SUM(M8_MMW_AVG_BAL) AS M8_MMW_AVG_BAL
		    , SUM(M9_MMW_AVG_BAL) AS M9_MMW_AVG_BAL
		    , SUM(M10_MMW_AVG_BAL) AS M10_MMW_AVG_BAL
		    , SUM(M11_MMW_AVG_BAL) AS M11_MMW_AVG_BAL
		    , SUM(RCNT_YY1_ABAL) AS RCNT_YY1_ABAL
		    , SUM(NON_OBJ_AMT) AS NON_OBJ_AMT
		    , MAX(PRNT_ORD) AS PRNT_ORD_PATH
        FROM (
		    SELECT 
		       MAX(BASE_DATE) AS BASE_DATE
		       , LVL1, LVL2, LVL3, LVL4, LVL5, LVL6, LVL7
		       , ROUND(SUM(BKPR_AMT), 0) AS BKPR_AMT
		       , ROUND(SUM(M0_MMW_AVG_BAL), 0) AS M0_MMW_AVG_BAL
		       , ROUND(SUM(M1_MMW_AVG_BAL), 0) AS M1_MMW_AVG_BAL
		       , ROUND(SUM(M2_MMW_AVG_BAL), 0) AS M2_MMW_AVG_BAL
		       , ROUND(SUM(M3_MMW_AVG_BAL), 0) AS M3_MMW_AVG_BAL
		       , ROUND(SUM(M4_MMW_AVG_BAL), 0) AS M4_MMW_AVG_BAL
		       , ROUND(SUM(M5_MMW_AVG_BAL), 0) AS M5_MMW_AVG_BAL
		       , ROUND(SUM(M6_MMW_AVG_BAL), 0) AS M6_MMW_AVG_BAL
		       , ROUND(SUM(M7_MMW_AVG_BAL), 0) AS M7_MMW_AVG_BAL
		       , ROUND(SUM(M8_MMW_AVG_BAL), 0) AS M8_MMW_AVG_BAL
		       , ROUND(SUM(M9_MMW_AVG_BAL), 0) AS M9_MMW_AVG_BAL
		       , ROUND(SUM(M10_MMW_AVG_BAL), 0) AS M10_MMW_AVG_BAL
		       , ROUND(SUM(M11_MMW_AVG_BAL), 0) AS M11_MMW_AVG_BAL
		       , ROUND(SUM(RCNT_YY1_ABAL)) AS RCNT_YY1_ABAL
		       , ROUND(SUM(NON_OBJ_AMT)) AS NON_OBJ_AMT
		       , MAX(PRNT_ORD) AS PRNT_ORD
            FROM (
                SELECT
		            A.BASE_DATE
		            , A.AC_BUSI_TC
		            , B.LVL1
		            , B.LVL2
		            , B.LVL3
		            , B.LVL4
		            , B.LVL5
		            , B.LVL6
		            , B.LVL7
		            , B.ACCT_C_NM
		            , B.ACCT_C
		            , NVL(A.BKPR_AMT, 0) AS BKPR_AMT
		            , A.M0_MMW_AVG_BAL
		            , A.M1_MMW_AVG_BAL
		            , A.M2_MMW_AVG_BAL
		            , A.M3_MMW_AVG_BAL
		            , A.M4_MMW_AVG_BAL 
		            , A.M5_MMW_AVG_BAL
		            , A.M6_MMW_AVG_BAL
		            , A.M7_MMW_AVG_BAL
		            , A.M8_MMW_AVG_BAL
		            , A.M9_MMW_AVG_BAL
		            , A.M10_MMW_AVG_BAL
		            , A.M11_MMW_AVG_BAL
		            , NVL(C.RCNT_YY1_ABAL, 0) AS RCNT_YY1_ABAL
		            , NVL(C.NON_OBJ_AMT, 0) AS NON_OBJ_AMT
		            <if test="sch_acc_tc_lvl == 1">
		            , B.PRNT_ORD1 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 2">
		            , B.PRNT_ORD1||B.PRNT_ORD2 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 3">
		            , B.PRNT_ORD1||B.PRNT_ORD2||B.PRNT_ORD3 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 4">
		            , B.PRNT_ORD1||B.PRNT_ORD2||B.PRNT_ORD3||B.PRNT_ORD4 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 5">
		            , B.PRNT_ORD1||B.PRNT_ORD2||B.PRNT_ORD3||B.PRNT_ORD4||B.PRNT_ORD5 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 6">
		            , B.PRNT_ORD1||B.PRNT_ORD2||B.PRNT_ORD3||B.PRNT_ORD4||B.PRNT_ORD5||B.PRNT_ORD6 AS PRNT_ORD
		            </if>
		            <if test="sch_acc_tc_lvl == 7">
		            , B.PRNT_ORD1||B.PRNT_ORD2||B.PRNT_ORD3||B.PRNT_ORD4||B.PRNT_ORD5||B.PRNT_ORD6||B.PRNT_ORD7 AS PRNT_ORD
		            </if>
                FROM DATA_TB A
                JOIN (
			        SELECT 
			            LEVEL, BASE_DATE, SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%') AS ACCT_PATH,
			            REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 1 ) AS LVL1,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 2 ),TRIM(ACCT_C_NM)) AS LVL2,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 3 ),TRIM(ACCT_C_NM)) AS LVL3,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 4 ),TRIM(ACCT_C_NM)) AS LVL4,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 5 ),TRIM(ACCT_C_NM)) AS LVL5,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 6 ),TRIM(ACCT_C_NM)) AS LVL6,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TRIM(ACCT_C_NM), '%'),'[^%]+' , 1 , 7 ),TRIM(ACCT_C_NM)) AS LVL7,
			            TRIM(ACCT_C_NM) AS ACCT_C_NM,
			            BS_PL_TC,
			            ORG_CLAS_C,
			            AC_BUSI_TC,
			            ACCT_C,
			            CORE_DEP_YN,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 1 ),'9999') AS PRNT_ORD1,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 2 ),'9999') AS PRNT_ORD2,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 3 ),'9999') AS PRNT_ORD3,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 4 ),'9999') AS PRNT_ORD4,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 5 ),'9999') AS PRNT_ORD5,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 6 ),'9999') AS PRNT_ORD6,
			            NVL(REGEXP_SUBSTR(SYS_CONNECT_BY_PATH(TO_CHAR(TRIM(PRNT_ORD),'FM0000'), '%'),'[^%]+' , 1 , 7 ),'9999') AS PRNT_ORD7,
                		CONNECT_BY_ISLEAF AS ISLEAF
			        FROM TSY_ACCT_MSTR_MNG
			        WHERE BASE_DATE = (SELECT MAX(BASE_DATE) FROM TSY_ACCT_MSTR_MNG WHERE BASE_DATE &lt;= #{sch_base_date})
		<choose>
			<when test="sch_ac_busi_tc == '0000'">
					AND AC_BUSI_TC = '1105' /*회계구분*/
					START WITH UP_ACCT_C = '0000000'
			        CONNECT BY PRIOR ACCT_C = UP_ACCT_C AND PRIOR BASE_DATE = BASE_DATE AND PRIOR ORG_CLAS_C = ORG_CLAS_C AND PRIOR AC_BUSI_TC = AC_BUSI_TC
			    ) B ON B.ACCT_C = A.ACCT_C AND B.ORG_CLAS_C = A.ORG_CLAS_C AND B.ISLEAF = '1'
		    </when>
		    <otherwise>
			    	AND AC_BUSI_TC = #{sch_ac_busi_tc} /*회계구분*/
			    	START WITH UP_ACCT_C = '0000000'
			        CONNECT BY PRIOR ACCT_C = UP_ACCT_C AND PRIOR BASE_DATE = BASE_DATE AND PRIOR ORG_CLAS_C = ORG_CLAS_C AND PRIOR AC_BUSI_TC = AC_BUSI_TC
			    ) B ON B.ACCT_C = A.ACCT_C AND B.ORG_CLAS_C = A.ORG_CLAS_C AND B.AC_BUSI_TC = A.AC_BUSI_TC AND B.ISLEAF = '1'
		    </otherwise>
		</choose>
		       LEFT JOIN TRT_RGLT_LQDT_DMDP_TOT C
		            ON C.BASE_DATE = #{sch_base_date}
		            AND C.BASE_DATE = A.BASE_DATE
		            AND C.BR_C = A.BR_C
		            AND C.ACCT_C = A.ACCT_C
		            AND C.AC_BUSI_TC = A.AC_BUSI_TC
		            AND C.MNBR_TOT_YN = 'Y'
		      WHERE B.CORE_DEP_YN = 'Y'
            ) 
            GROUP BY LVL1, LVL2, LVL3, LVL4, LVL5, LVL6, LVL7
        )
		GROUP BY 
			LVL1
		<if test="sch_acc_tc_lvl == 1">
			
		</if>
		<if test="sch_acc_tc_lvl == 2">
			, ROLLUP(LVL2)
		</if>
		<if test="sch_acc_tc_lvl == 3">
			, ROLLUP(LVL2, LVL3)
		</if>
		<if test="sch_acc_tc_lvl == 4">
			, ROLLUP(LVL2, LVL3, LVL4)
		</if>
		<if test="sch_acc_tc_lvl == 5">
			, ROLLUP(LVL2, LVL3, LVL4, LVL5)
		</if>
		<if test="sch_acc_tc_lvl == 6">
			, ROLLUP(LVL2, LVL3, LVL4, LVL5, LVL6)
		</if>
		<if test="sch_acc_tc_lvl == 7">
			, ROLLUP(LVL2, LVL3, LVL4, LVL5, LVL6, LVL7)
		</if>
		ORDER BY PRNT_ORD_PATH, GRP_ID
	</select>
	
	<select id="selectBaseDateSchCbList" parameterType="java.util.Map" resultType="java.util.HashMap">
		SELECT 
			TO_CHAR(TO_DATE(MAX(BASE_DATE), 'YYYYMMDD'), 'YYYY-MM') AS BASE_DATE 
		FROM TIG_BS_RSLT_TOT_M
	</select>

</mapper>